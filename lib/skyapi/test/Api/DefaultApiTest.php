<?php
/**
 * DefaultApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Skyapi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.26.0
 * Contact: contact@skycoin.net
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Skyapi;

use \Skyapi\Configuration;
use \Skyapi\ApiException;
use \Skyapi\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * DefaultApiTest Class Doc Comment
 *
 * @category Class
 * @package  Skyapi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for addressCount
     *
     * Returns the total number of unique address that have coins..
     *
     */
    public function testAddressCount()
    {
    }

    /**
     * Test case for addressUxouts
     *
     * .
     *
     */
    public function testAddressUxouts()
    {
    }

    /**
     * Test case for apiV1RawtxGet
     *
     * .
     *
     */
    public function testApiV1RawtxGet()
    {
    }

    /**
     * Test case for apiV2MetricsGet
     *
     * .
     *
     */
    public function testApiV2MetricsGet()
    {
    }

    /**
     * Test case for balanceGet
     *
     * Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends..
     *
     */
    public function testBalanceGet()
    {
    }

    /**
     * Test case for balancePost
     *
     * Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends..
     *
     */
    public function testBalancePost()
    {
    }

    /**
     * Test case for block
     *
     * Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends..
     *
     */
    public function testBlock()
    {
    }

    /**
     * Test case for blockchainMetadata
     *
     * Returns the blockchain metadata..
     *
     */
    public function testBlockchainMetadata()
    {
    }

    /**
     * Test case for blockchainProgress
     *
     * Returns the blockchain sync progress..
     *
     */
    public function testBlockchainProgress()
    {
    }

    /**
     * Test case for blocks
     *
     * Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends..
     *
     */
    public function testBlocks()
    {
    }

    /**
     * Test case for coinSupply
     *
     * .
     *
     */
    public function testCoinSupply()
    {
    }

    /**
     * Test case for csrf
     *
     * Creates a new CSRF token. Previous CSRF tokens are invalidated by this call..
     *
     */
    public function testCsrf()
    {
    }

    /**
     * Test case for dataDELETE
     *
     * .
     *
     */
    public function testDataDELETE()
    {
    }

    /**
     * Test case for dataGET
     *
     * .
     *
     */
    public function testDataGET()
    {
    }

    /**
     * Test case for dataPOST
     *
     * .
     *
     */
    public function testDataPOST()
    {
    }

    /**
     * Test case for defaultConnections
     *
     * defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to..
     *
     */
    public function testDefaultConnections()
    {
    }

    /**
     * Test case for health
     *
     * Returns node health data..
     *
     */
    public function testHealth()
    {
    }

    /**
     * Test case for lastBlocks
     *
     * .
     *
     */
    public function testLastBlocks()
    {
    }

    /**
     * Test case for networkConnection
     *
     * This endpoint returns a specific connection..
     *
     */
    public function testNetworkConnection()
    {
    }

    /**
     * Test case for networkConnections
     *
     * This endpoint returns all outgoings connections..
     *
     */
    public function testNetworkConnections()
    {
    }

    /**
     * Test case for networkConnectionsDisconnect
     *
     * .
     *
     */
    public function testNetworkConnectionsDisconnect()
    {
    }

    /**
     * Test case for networkConnectionsExchange
     *
     * .
     *
     */
    public function testNetworkConnectionsExchange()
    {
    }

    /**
     * Test case for networkConnectionsTrust
     *
     * trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses..
     *
     */
    public function testNetworkConnectionsTrust()
    {
    }

    /**
     * Test case for outputsGet
     *
     * If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified..
     *
     */
    public function testOutputsGet()
    {
    }

    /**
     * Test case for outputsPost
     *
     * If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified..
     *
     */
    public function testOutputsPost()
    {
    }

    /**
     * Test case for pendingTxs
     *
     * .
     *
     */
    public function testPendingTxs()
    {
    }

    /**
     * Test case for resendUnconfirmedTxns
     *
     * .
     *
     */
    public function testResendUnconfirmedTxns()
    {
    }

    /**
     * Test case for richlist
     *
     * Returns the top skycoin holders..
     *
     */
    public function testRichlist()
    {
    }

    /**
     * Test case for transaction
     *
     * .
     *
     */
    public function testTransaction()
    {
    }

    /**
     * Test case for transactionInject
     *
     * Broadcast a hex-encoded, serialized transaction to the network..
     *
     */
    public function testTransactionInject()
    {
    }

    /**
     * Test case for transactionPost
     *
     * .
     *
     */
    public function testTransactionPost()
    {
    }

    /**
     * Test case for transactionPostUnspent
     *
     * .
     *
     */
    public function testTransactionPostUnspent()
    {
    }

    /**
     * Test case for transactionRaw
     *
     * Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed..
     *
     */
    public function testTransactionRaw()
    {
    }

    /**
     * Test case for transactionVerify
     *
     * .
     *
     */
    public function testTransactionVerify()
    {
    }

    /**
     * Test case for transactionsGet
     *
     * Returns transactions that match the filters..
     *
     */
    public function testTransactionsGet()
    {
    }

    /**
     * Test case for transactionsPost
     *
     * Returns transactions that match the filters..
     *
     */
    public function testTransactionsPost()
    {
    }

    /**
     * Test case for uxout
     *
     * Returns an unspent output by ID..
     *
     */
    public function testUxout()
    {
    }

    /**
     * Test case for verifyAddress
     *
     * Verifies a Skycoin address..
     *
     */
    public function testVerifyAddress()
    {
    }

    /**
     * Test case for version
     *
     * .
     *
     */
    public function testVersion()
    {
    }

    /**
     * Test case for wallet
     *
     * Returns a wallet by id..
     *
     */
    public function testWallet()
    {
    }

    /**
     * Test case for walletBalance
     *
     * Returns the wallet's balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends..
     *
     */
    public function testWalletBalance()
    {
    }

    /**
     * Test case for walletCreate
     *
     * .
     *
     */
    public function testWalletCreate()
    {
    }

    /**
     * Test case for walletDecrypt
     *
     * Decrypts wallet..
     *
     */
    public function testWalletDecrypt()
    {
    }

    /**
     * Test case for walletEncrypt
     *
     * Encrypt wallet..
     *
     */
    public function testWalletEncrypt()
    {
    }

    /**
     * Test case for walletFolder
     *
     * .
     *
     */
    public function testWalletFolder()
    {
    }

    /**
     * Test case for walletNewAddress
     *
     * .
     *
     */
    public function testWalletNewAddress()
    {
    }

    /**
     * Test case for walletNewSeed
     *
     * .
     *
     */
    public function testWalletNewSeed()
    {
    }

    /**
     * Test case for walletRecover
     *
     * Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned..
     *
     */
    public function testWalletRecover()
    {
    }

    /**
     * Test case for walletSeed
     *
     * This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned..
     *
     */
    public function testWalletSeed()
    {
    }

    /**
     * Test case for walletSeedVerify
     *
     * Verifies a wallet seed..
     *
     */
    public function testWalletSeedVerify()
    {
    }

    /**
     * Test case for walletTransaction
     *
     * Creates a signed transaction.
     *
     */
    public function testWalletTransaction()
    {
    }

    /**
     * Test case for walletTransactionSign
     *
     * Creates a signed transaction.
     *
     */
    public function testWalletTransactionSign()
    {
    }

    /**
     * Test case for walletTransactions
     *
     * .
     *
     */
    public function testWalletTransactions()
    {
    }

    /**
     * Test case for walletUnload
     *
     * Unloads wallet from the wallet service..
     *
     */
    public function testWalletUnload()
    {
    }

    /**
     * Test case for walletUpdate
     *
     * Update the wallet..
     *
     */
    public function testWalletUpdate()
    {
    }

    /**
     * Test case for wallets
     *
     * .
     *
     */
    public function testWallets()
    {
    }
}
