<?php
/**
 * InlineResponse2002
 *
 * PHP version 5
 *
 * @category Class
 * @package  Skyapi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.26.0
 * Contact: contact@skycoin.net
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Skyapi\Model;

use \ArrayAccess;
use \Skyapi\ObjectSerializer;

/**
 * InlineResponse2002 Class Doc Comment
 *
 * @category Class
 * @package  Skyapi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse2002 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'current_coinhour_supply' => 'string',
        'current_supply' => 'string',
        'locked_distribution_addresses' => 'string[]',
        'max_supply' => 'string',
        'total_coinhour_supply' => 'string',
        'total_supply' => 'string',
        'unlocked_distribution_addresses' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'current_coinhour_supply' => null,
        'current_supply' => null,
        'locked_distribution_addresses' => null,
        'max_supply' => null,
        'total_coinhour_supply' => null,
        'total_supply' => null,
        'unlocked_distribution_addresses' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'current_coinhour_supply' => 'current_coinhour_supply',
        'current_supply' => 'current_supply',
        'locked_distribution_addresses' => 'locked_distribution_addresses',
        'max_supply' => 'max_supply',
        'total_coinhour_supply' => 'total_coinhour_supply',
        'total_supply' => 'total_supply',
        'unlocked_distribution_addresses' => 'unlocked_distribution_addresses'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'current_coinhour_supply' => 'setCurrentCoinhourSupply',
        'current_supply' => 'setCurrentSupply',
        'locked_distribution_addresses' => 'setLockedDistributionAddresses',
        'max_supply' => 'setMaxSupply',
        'total_coinhour_supply' => 'setTotalCoinhourSupply',
        'total_supply' => 'setTotalSupply',
        'unlocked_distribution_addresses' => 'setUnlockedDistributionAddresses'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'current_coinhour_supply' => 'getCurrentCoinhourSupply',
        'current_supply' => 'getCurrentSupply',
        'locked_distribution_addresses' => 'getLockedDistributionAddresses',
        'max_supply' => 'getMaxSupply',
        'total_coinhour_supply' => 'getTotalCoinhourSupply',
        'total_supply' => 'getTotalSupply',
        'unlocked_distribution_addresses' => 'getUnlockedDistributionAddresses'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['current_coinhour_supply'] = isset($data['current_coinhour_supply']) ? $data['current_coinhour_supply'] : null;
        $this->container['current_supply'] = isset($data['current_supply']) ? $data['current_supply'] : null;
        $this->container['locked_distribution_addresses'] = isset($data['locked_distribution_addresses']) ? $data['locked_distribution_addresses'] : null;
        $this->container['max_supply'] = isset($data['max_supply']) ? $data['max_supply'] : null;
        $this->container['total_coinhour_supply'] = isset($data['total_coinhour_supply']) ? $data['total_coinhour_supply'] : null;
        $this->container['total_supply'] = isset($data['total_supply']) ? $data['total_supply'] : null;
        $this->container['unlocked_distribution_addresses'] = isset($data['unlocked_distribution_addresses']) ? $data['unlocked_distribution_addresses'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets current_coinhour_supply
     *
     * @return string|null
     */
    public function getCurrentCoinhourSupply()
    {
        return $this->container['current_coinhour_supply'];
    }

    /**
     * Sets current_coinhour_supply
     *
     * @param string|null $current_coinhour_supply CurrentCoinHourSupply is coins hours in non distribution addresses.
     *
     * @return $this
     */
    public function setCurrentCoinhourSupply($current_coinhour_supply)
    {
        $this->container['current_coinhour_supply'] = $current_coinhour_supply;

        return $this;
    }

    /**
     * Gets current_supply
     *
     * @return string|null
     */
    public function getCurrentSupply()
    {
        return $this->container['current_supply'];
    }

    /**
     * Sets current_supply
     *
     * @param string|null $current_supply Coins distributed beyond the project.
     *
     * @return $this
     */
    public function setCurrentSupply($current_supply)
    {
        $this->container['current_supply'] = $current_supply;

        return $this;
    }

    /**
     * Gets locked_distribution_addresses
     *
     * @return string[]|null
     */
    public function getLockedDistributionAddresses()
    {
        return $this->container['locked_distribution_addresses'];
    }

    /**
     * Sets locked_distribution_addresses
     *
     * @param string[]|null $locked_distribution_addresses Distribution addresses which are locked and do not count towards total supply.
     *
     * @return $this
     */
    public function setLockedDistributionAddresses($locked_distribution_addresses)
    {
        $this->container['locked_distribution_addresses'] = $locked_distribution_addresses;

        return $this;
    }

    /**
     * Gets max_supply
     *
     * @return string|null
     */
    public function getMaxSupply()
    {
        return $this->container['max_supply'];
    }

    /**
     * Sets max_supply
     *
     * @param string|null $max_supply MaxSupply is the maximum number of coins to be distributed ever.
     *
     * @return $this
     */
    public function setMaxSupply($max_supply)
    {
        $this->container['max_supply'] = $max_supply;

        return $this;
    }

    /**
     * Gets total_coinhour_supply
     *
     * @return string|null
     */
    public function getTotalCoinhourSupply()
    {
        return $this->container['total_coinhour_supply'];
    }

    /**
     * Sets total_coinhour_supply
     *
     * @param string|null $total_coinhour_supply TotalCoinHourSupply is coin hours in all addresses including unlocked distribution addresses.
     *
     * @return $this
     */
    public function setTotalCoinhourSupply($total_coinhour_supply)
    {
        $this->container['total_coinhour_supply'] = $total_coinhour_supply;

        return $this;
    }

    /**
     * Gets total_supply
     *
     * @return string|null
     */
    public function getTotalSupply()
    {
        return $this->container['total_supply'];
    }

    /**
     * Sets total_supply
     *
     * @param string|null $total_supply TotalSupply is CurrentSupply plus coins held by the distribution addresses that are spendable.
     *
     * @return $this
     */
    public function setTotalSupply($total_supply)
    {
        $this->container['total_supply'] = $total_supply;

        return $this;
    }

    /**
     * Gets unlocked_distribution_addresses
     *
     * @return string[]|null
     */
    public function getUnlockedDistributionAddresses()
    {
        return $this->container['unlocked_distribution_addresses'];
    }

    /**
     * Sets unlocked_distribution_addresses
     *
     * @param string[]|null $unlocked_distribution_addresses Distribution addresses which count towards total supply.
     *
     * @return $this
     */
    public function setUnlockedDistributionAddresses($unlocked_distribution_addresses)
    {
        $this->container['unlocked_distribution_addresses'] = $unlocked_distribution_addresses;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


