<?php
/**
 * InlineResponse200
 *
 * PHP version 5
 *
 * @category Class
 * @package  Skyapi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.1
 * Contact: skycoin.doe@example.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Skyapi\Model;

use \ArrayAccess;
use \Skyapi\ObjectSerializer;

/**
 * InlineResponse200 Class Doc Comment
 *
 * @category Class
 * @package  Skyapi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse200 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'hours' => 'int',
        'coins' => 'int',
        'uxid' => 'string',
        'owner_address' => 'string',
        'spent_block_seq' => 'int',
        'spent_tx' => 'string',
        'time' => 'int',
        'src_block_seq' => 'int',
        'src_tx' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'hours' => 'int64',
        'coins' => 'integer',
        'uxid' => null,
        'owner_address' => null,
        'spent_block_seq' => 'in64',
        'spent_tx' => null,
        'time' => 'int64',
        'src_block_seq' => 'int64',
        'src_tx' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hours' => 'hours',
        'coins' => 'coins',
        'uxid' => 'uxid',
        'owner_address' => 'owner_address',
        'spent_block_seq' => 'spent_block_seq',
        'spent_tx' => 'spent_tx',
        'time' => 'time',
        'src_block_seq' => 'src_block_seq',
        'src_tx' => 'src_tx'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hours' => 'setHours',
        'coins' => 'setCoins',
        'uxid' => 'setUxid',
        'owner_address' => 'setOwnerAddress',
        'spent_block_seq' => 'setSpentBlockSeq',
        'spent_tx' => 'setSpentTx',
        'time' => 'setTime',
        'src_block_seq' => 'setSrcBlockSeq',
        'src_tx' => 'setSrcTx'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hours' => 'getHours',
        'coins' => 'getCoins',
        'uxid' => 'getUxid',
        'owner_address' => 'getOwnerAddress',
        'spent_block_seq' => 'getSpentBlockSeq',
        'spent_tx' => 'getSpentTx',
        'time' => 'getTime',
        'src_block_seq' => 'getSrcBlockSeq',
        'src_tx' => 'getSrcTx'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hours'] = isset($data['hours']) ? $data['hours'] : null;
        $this->container['coins'] = isset($data['coins']) ? $data['coins'] : null;
        $this->container['uxid'] = isset($data['uxid']) ? $data['uxid'] : null;
        $this->container['owner_address'] = isset($data['owner_address']) ? $data['owner_address'] : null;
        $this->container['spent_block_seq'] = isset($data['spent_block_seq']) ? $data['spent_block_seq'] : null;
        $this->container['spent_tx'] = isset($data['spent_tx']) ? $data['spent_tx'] : null;
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
        $this->container['src_block_seq'] = isset($data['src_block_seq']) ? $data['src_block_seq'] : null;
        $this->container['src_tx'] = isset($data['src_tx']) ? $data['src_tx'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hours
     *
     * @return int|null
     */
    public function getHours()
    {
        return $this->container['hours'];
    }

    /**
     * Sets hours
     *
     * @param int|null $hours hours
     *
     * @return $this
     */
    public function setHours($hours)
    {
        $this->container['hours'] = $hours;

        return $this;
    }

    /**
     * Gets coins
     *
     * @return int|null
     */
    public function getCoins()
    {
        return $this->container['coins'];
    }

    /**
     * Sets coins
     *
     * @param int|null $coins coins
     *
     * @return $this
     */
    public function setCoins($coins)
    {
        $this->container['coins'] = $coins;

        return $this;
    }

    /**
     * Gets uxid
     *
     * @return string|null
     */
    public function getUxid()
    {
        return $this->container['uxid'];
    }

    /**
     * Sets uxid
     *
     * @param string|null $uxid uxid
     *
     * @return $this
     */
    public function setUxid($uxid)
    {
        $this->container['uxid'] = $uxid;

        return $this;
    }

    /**
     * Gets owner_address
     *
     * @return string|null
     */
    public function getOwnerAddress()
    {
        return $this->container['owner_address'];
    }

    /**
     * Sets owner_address
     *
     * @param string|null $owner_address owner_address
     *
     * @return $this
     */
    public function setOwnerAddress($owner_address)
    {
        $this->container['owner_address'] = $owner_address;

        return $this;
    }

    /**
     * Gets spent_block_seq
     *
     * @return int|null
     */
    public function getSpentBlockSeq()
    {
        return $this->container['spent_block_seq'];
    }

    /**
     * Sets spent_block_seq
     *
     * @param int|null $spent_block_seq spent_block_seq
     *
     * @return $this
     */
    public function setSpentBlockSeq($spent_block_seq)
    {
        $this->container['spent_block_seq'] = $spent_block_seq;

        return $this;
    }

    /**
     * Gets spent_tx
     *
     * @return string|null
     */
    public function getSpentTx()
    {
        return $this->container['spent_tx'];
    }

    /**
     * Sets spent_tx
     *
     * @param string|null $spent_tx spent_tx
     *
     * @return $this
     */
    public function setSpentTx($spent_tx)
    {
        $this->container['spent_tx'] = $spent_tx;

        return $this;
    }

    /**
     * Gets time
     *
     * @return int|null
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param int|null $time time
     *
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets src_block_seq
     *
     * @return int|null
     */
    public function getSrcBlockSeq()
    {
        return $this->container['src_block_seq'];
    }

    /**
     * Sets src_block_seq
     *
     * @param int|null $src_block_seq src_block_seq
     *
     * @return $this
     */
    public function setSrcBlockSeq($src_block_seq)
    {
        $this->container['src_block_seq'] = $src_block_seq;

        return $this;
    }

    /**
     * Gets src_tx
     *
     * @return string|null
     */
    public function getSrcTx()
    {
        return $this->container['src_tx'];
    }

    /**
     * Sets src_tx
     *
     * @param string|null $src_tx src_tx
     *
     * @return $this
     */
    public function setSrcTx($src_tx)
    {
        $this->container['src_tx'] = $src_tx;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


