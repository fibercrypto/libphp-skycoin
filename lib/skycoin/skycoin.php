<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('skycoin')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_skycoin.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('skycoin.so')) return;
    } else {
      if (!dl('skycoin.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class skycoin {
	static function SKY_fee_VerifyTransactionFee($p0,$p1,$p2) {
		return SKY_fee_VerifyTransactionFee($p0,$p1,$p2);
	}

	static function SKY_fee_VerifyTransactionFeeForHours($p0,$p1,$p2) {
		return SKY_fee_VerifyTransactionFeeForHours($p0,$p1,$p2);
	}

	static function SKY_fee_RequiredFee($p0,$p1,$p2) {
		return SKY_fee_RequiredFee($p0,$p1,$p2);
	}

	static function SKY_fee_RemainingHours($p0,$p1,$p2) {
		return SKY_fee_RemainingHours($p0,$p1,$p2);
	}

	static function SKY_fee_TransactionFee($p0,$p1,$p2,$p3) {
		return SKY_fee_TransactionFee($p0,$p1,$p2,$p3);
	}

	static function SKY_JsonEncode_Handle($p0,$p1) {
		return SKY_JsonEncode_Handle($p0,$p1);
	}

	static function SKY_Handle_Progress_GetCurrent($p0,$p1) {
		return SKY_Handle_Progress_GetCurrent($p0,$p1);
	}

	static function SKY_Handle_Block_GetHeadSeq($p0,$p1) {
		return SKY_Handle_Block_GetHeadSeq($p0,$p1);
	}

	static function SKY_Handle_Block_GetHeadHash($p0,$p1) {
		return SKY_Handle_Block_GetHeadHash($p0,$p1);
	}

	static function SKY_Handle_Block_GetPreviousBlockHash($p0,$p1) {
		return SKY_Handle_Block_GetPreviousBlockHash($p0,$p1);
	}

	static function SKY_Handle_Blocks_GetAt($p0,$p1,$p2) {
		return SKY_Handle_Blocks_GetAt($p0,$p1,$p2);
	}

	static function SKY_Handle_Blocks_GetCount($p0,$p1) {
		return SKY_Handle_Blocks_GetCount($p0,$p1);
	}

	static function SKY_Handle_Connections_GetCount($p0,$p1) {
		return SKY_Handle_Connections_GetCount($p0,$p1);
	}

	static function SKY_Handle_Strings_GetCount($p0,$p1) {
		return SKY_Handle_Strings_GetCount($p0,$p1);
	}

	static function SKY_Handle_Strings_Sort($p0) {
		return SKY_Handle_Strings_Sort($p0);
	}

	static function SKY_Handle_Strings_GetAt($p0,$p1,$p2) {
		return SKY_Handle_Strings_GetAt($p0,$p1,$p2);
	}

	static function SKY_api_Handle_Client_GetWalletDir($p0,$p1) {
		return SKY_api_Handle_Client_GetWalletDir($p0,$p1);
	}

	static function SKY_api_Handle_Client_GetWalletFileName($p0,$p1) {
		return SKY_api_Handle_Client_GetWalletFileName($p0,$p1);
	}

	static function SKY_api_Handle_Client_GetWalletLabel($p0,$p1) {
		return SKY_api_Handle_Client_GetWalletLabel($p0,$p1);
	}

	static function SKY_api_Handle_Client_GetWalletFullPath($p0,$p1,$p2) {
		return SKY_api_Handle_Client_GetWalletFullPath($p0,$p1,$p2);
	}

	static function SKY_api_Handle_GetWalletMeta($p0,$p1) {
		return SKY_api_Handle_GetWalletMeta($p0,$p1);
	}

	static function SKY_api_Handle_GetWalletEntriesCount($p0,$p1) {
		return SKY_api_Handle_GetWalletEntriesCount($p0,$p1);
	}

	static function SKY_api_Handle_Client_GetWalletResponseEntriesCount($p0,$p1) {
		return SKY_api_Handle_Client_GetWalletResponseEntriesCount($p0,$p1);
	}

	static function SKY_api_Handle_WalletGetEntry($p0,$p1,$p2,$p3) {
		return SKY_api_Handle_WalletGetEntry($p0,$p1,$p2,$p3);
	}

	static function SKY_api_Handle_WalletResponseGetEntry($p0,$p1,$p2,$p3) {
		return SKY_api_Handle_WalletResponseGetEntry($p0,$p1,$p2,$p3);
	}

	static function SKY_api_Handle_WalletResponseIsEncrypted($p0,$p1) {
		return SKY_api_Handle_WalletResponseIsEncrypted($p0,$p1);
	}

	static function SKY_api_Handle_WalletResponseGetCryptoType($p0,$p1) {
		return SKY_api_Handle_WalletResponseGetCryptoType($p0,$p1);
	}

	static function SKY_api_Handle_WalletsResponseGetCount($p0,$p1) {
		return SKY_api_Handle_WalletsResponseGetCount($p0,$p1);
	}

	static function SKY_api_Handle_WalletsResponseGetAt($p0,$p1,$p2) {
		return SKY_api_Handle_WalletsResponseGetAt($p0,$p1,$p2);
	}

	static function SKY_api_Handle_GetWalletFolderAddress($p0,$p1) {
		return SKY_api_Handle_GetWalletFolderAddress($p0,$p1);
	}

	static function SKY_api_Handle_GetWalletSeed($p0,$p1) {
		return SKY_api_Handle_GetWalletSeed($p0,$p1);
	}

	static function SKY_api_Handle_GetWalletLastSeed($p0,$p1) {
		return SKY_api_Handle_GetWalletLastSeed($p0,$p1);
	}

	static function SKY_api_Handle_GetBuildInfoData($p0,$p1,$p2,$p3) {
		return SKY_api_Handle_GetBuildInfoData($p0,$p1,$p2,$p3);
	}

	static function SKY_httphelper_Address_UnmarshalJSON($p0,$p1) {
		return SKY_httphelper_Address_UnmarshalJSON($p0,$p1);
	}

	static function SKY_httphelper_Address_MarshalJSON($p0,$p1) {
		return SKY_httphelper_Address_MarshalJSON($p0,$p1);
	}

	static function SKY_httphelper_Coins_UnmarshalJSON($p0,$p1) {
		return SKY_httphelper_Coins_UnmarshalJSON($p0,$p1);
	}

	static function SKY_httphelper_Coins_MarshalJSON($p0,$p1) {
		return SKY_httphelper_Coins_MarshalJSON($p0,$p1);
	}

	static function SKY_httphelper_Coins_Value($p0,$p1) {
		return SKY_httphelper_Coins_Value($p0,$p1);
	}

	static function SKY_httphelper_Hours_UnmarshalJSON($p0,$p1) {
		return SKY_httphelper_Hours_UnmarshalJSON($p0,$p1);
	}

	static function SKY_httphelper_Hours_MarshalJSON($p0,$p1) {
		return SKY_httphelper_Hours_MarshalJSON($p0,$p1);
	}

	static function SKY_httphelper_Hours_Value($p0,$p1) {
		return SKY_httphelper_Hours_Value($p0,$p1);
	}

	static function SKY_util_AddUint64($p0,$p1,$p2) {
		return SKY_util_AddUint64($p0,$p1,$p2);
	}

	static function SKY_util_Uint64ToInt64($p0,$p1) {
		return SKY_util_Uint64ToInt64($p0,$p1);
	}

	static function SKY_util_Int64ToUint64($p0,$p1) {
		return SKY_util_Int64ToUint64($p0,$p1);
	}

	static function SKY_util_IntToUint32($p0,$p1) {
		return SKY_util_IntToUint32($p0,$p1);
	}

	static function SKY_cli_AddPrivateKey($p0,$p1) {
		return SKY_cli_AddPrivateKey($p0,$p1);
	}

	static function SKY_cli_AddPrivateKeyToFile($p0,$p1,$p2) {
		return SKY_cli_AddPrivateKeyToFile($p0,$p1,$p2);
	}

	static function SKY_wallet_CreateOptionsHandle($p0,$p1,$p2,$p3,$p4,$p5,$p6,$p7) {
		return SKY_wallet_CreateOptionsHandle($p0,$p1,$p2,$p3,$p4,$p5,$p6,$p7);
	}

	static function SKY_wallet_Entry_Verify($p0) {
		return SKY_wallet_Entry_Verify($p0);
	}

	static function SKY_wallet_Entry_VerifyPublic($p0) {
		return SKY_wallet_Entry_VerifyPublic($p0);
	}

	static function SKY_logging_EnableColors() {
		return SKY_logging_EnableColors();
	}

	static function SKY_logging_DisableColors() {
		return SKY_logging_DisableColors();
	}

	static function SKY_logging_Disable() {
		return SKY_logging_Disable();
	}

	static function SKY_cli_CLI_Run($p0) {
		return SKY_cli_CLI_Run($p0);
	}

	static function SKY_cli_Config_GetCoin($p0,$p1) {
		return SKY_cli_Config_GetCoin($p0,$p1);
	}

	static function SKY_cli_Config_GetRPCAddress($p0,$p1) {
		return SKY_cli_Config_GetRPCAddress($p0,$p1);
	}

	static function SKY_cli_Getenv($p0,$p1) {
		return SKY_cli_Getenv($p0,$p1);
	}

	static function SKY_cli_Setenv($p0,$p1) {
		return SKY_cli_Setenv($p0,$p1);
	}

	static function SKY_wallet_NewBalance($p0,$p1,$p2) {
		return SKY_wallet_NewBalance($p0,$p1,$p2);
	}

	static function SKY_wallet_NewBalanceFromUxOut($p0,$p1,$p2) {
		return SKY_wallet_NewBalanceFromUxOut($p0,$p1,$p2);
	}

	static function SKY_wallet_Balance_Add($p0,$p1,$p2) {
		return SKY_wallet_Balance_Add($p0,$p1,$p2);
	}

	static function SKY_wallet_Balance_Sub($p0,$p1,$p2) {
		return SKY_wallet_Balance_Sub($p0,$p1,$p2);
	}

	static function SKY_wallet_Balance_Equals($p0,$p1,$p2) {
		return SKY_wallet_Balance_Equals($p0,$p1,$p2);
	}

	static function SKY_wallet_Balance_IsZero($p0,$p1) {
		return SKY_wallet_Balance_IsZero($p0,$p1);
	}

	static function SKY_certutil_NewTLSCertPair($p0,$p1,$p2,$p3,$p4) {
		return SKY_certutil_NewTLSCertPair($p0,$p1,$p2,$p3,$p4);
	}

	static function SKY_cipher_DecodeBase58BitcoinAddress($p0,$p1) {
		return SKY_cipher_DecodeBase58BitcoinAddress($p0,$p1);
	}

	static function SKY_cipher_BitcoinAddressFromPubKey($p0,$p1) {
		SKY_cipher_BitcoinAddressFromPubKey($p0,$p1);
	}

	static function SKY_cipher_BitcoinAddressFromSecKey($p0,$p1) {
		return SKY_cipher_BitcoinAddressFromSecKey($p0,$p1);
	}

	static function SKY_cipher_BitcoinWalletImportFormatFromSeckey($p0,$p1) {
		SKY_cipher_BitcoinWalletImportFormatFromSeckey($p0,$p1);
	}

	static function SKY_cipher_BitcoinAddressFromBytes($p0,$p1) {
		return SKY_cipher_BitcoinAddressFromBytes($p0,$p1);
	}

	static function SKY_cipher_SecKeyFromBitcoinWalletImportFormat($p0,$p1) {
		return SKY_cipher_SecKeyFromBitcoinWalletImportFormat($p0,$p1);
	}

	static function SKY_cipher_BitcoinAddress_Null($p0) {
		return SKY_cipher_BitcoinAddress_Null($p0);
	}

	static function SKY_cipher_BitcoinAddress_Bytes($p0,$p1) {
		SKY_cipher_BitcoinAddress_Bytes($p0,$p1);
	}

	static function SKY_cipher_BitcoinAddress_Verify($p0,$p1) {
		return SKY_cipher_BitcoinAddress_Verify($p0,$p1);
	}

	static function SKY_cipher_BitcoinAddress_String($p0,$p1) {
		SKY_cipher_BitcoinAddress_String($p0,$p1);
	}

	static function SKY_cipher_BitcoinAddress_Checksum($p0,$p1) {
		SKY_cipher_BitcoinAddress_Checksum($p0,$p1);
	}

	static function SKY_transaction_ChooseSpendsMaximizeUxOuts($p0,$p1,$p2,$p3) {
		return SKY_transaction_ChooseSpendsMaximizeUxOuts($p0,$p1,$p2,$p3);
	}

	static function SKY_transaction_ChooseSpendsMinimizeUxOuts($p0,$p1,$p2,$p3) {
		return SKY_transaction_ChooseSpendsMinimizeUxOuts($p0,$p1,$p2,$p3);
	}

	static function SKY_transaction_NewUxBalance($p0,$p1,$p2) {
		return SKY_transaction_NewUxBalance($p0,$p1,$p2);
	}

	static function SKY_transaction_NewUxBalances($p0,$p1,$p2) {
		return SKY_transaction_NewUxBalances($p0,$p1,$p2);
	}

	static function SKY_cli_GenerateWallet($p0,$p1,$p2,$p3) {
		return SKY_cli_GenerateWallet($p0,$p1,$p2,$p3);
	}

	static function SKY_cli_MakeAlphanumericSeed($p0) {
		return SKY_cli_MakeAlphanumericSeed($p0);
	}

	static function SKY_testutil_MakeAddress($p0) {
		return SKY_testutil_MakeAddress($p0);
	}

	static function SKY_cli_LoadConfig($p0) {
		return SKY_cli_LoadConfig($p0);
	}

	static function SKY_cli_Config_FullWalletPath($p0,$p1) {
		return SKY_cli_Config_FullWalletPath($p0,$p1);
	}

	static function SKY_cli_Config_FullDBPath($p0,$p1) {
		return SKY_cli_Config_FullDBPath($p0,$p1);
	}

	static function SKY_cli_NewCLI($p0,$p1) {
		return SKY_cli_NewCLI($p0,$p1);
	}

	static function SKY_cli_NewPasswordReader($p0,$p1) {
		SKY_cli_NewPasswordReader($p0,$p1);
	}

	static function SKY_cli_PasswordFromBytes_Password($p0,$p1) {
		return SKY_cli_PasswordFromBytes_Password($p0,$p1);
	}

	static function SKY_cli_PasswordFromTerm_Password($p0) {
		return SKY_cli_PasswordFromTerm_Password($p0);
	}

	static function SKY_apputil_CatchInterruptPanic() {
		return SKY_apputil_CatchInterruptPanic();
	}

	static function SKY_apputil_CatchDebug() {
		return SKY_apputil_CatchDebug();
	}

	static function SKY_apputil_PrintProgramStatus() {
		return SKY_apputil_PrintProgramStatus();
	}

	static function SKY_cipher_RandByte($p0,$p1) {
		return SKY_cipher_RandByte($p0,$p1);
	}

	static function SKY_cipher_NewPubKey($p0,$p1) {
		return SKY_cipher_NewPubKey($p0,$p1);
	}

	static function SKY_cipher_PubKeyFromHex($p0,$p1) {
		return SKY_cipher_PubKeyFromHex($p0,$p1);
	}

	static function SKY_cipher_PubKeyFromSecKey($p0,$p1) {
		return SKY_cipher_PubKeyFromSecKey($p0,$p1);
	}

	static function SKY_cipher_PubKeyFromSig($p0,$p1,$p2) {
		return SKY_cipher_PubKeyFromSig($p0,$p1,$p2);
	}

	static function SKY_cipher_PubKey_Verify($p0) {
		return SKY_cipher_PubKey_Verify($p0);
	}

	static function SKY_cipher_PubKey_Hex($p0,$p1) {
		return SKY_cipher_PubKey_Hex($p0,$p1);
	}

	static function SKY_cipher_PubKeyRipemd160($p0,$p1) {
		return SKY_cipher_PubKeyRipemd160($p0,$p1);
	}

	static function SKY_cipher_NewSecKey($p0,$p1) {
		return SKY_cipher_NewSecKey($p0,$p1);
	}

	static function SKY_cipher_SecKeyFromHex($p0,$p1) {
		return SKY_cipher_SecKeyFromHex($p0,$p1);
	}

	static function SKY_cipher_SecKey_Verify($p0) {
		return SKY_cipher_SecKey_Verify($p0);
	}

	static function SKY_cipher_SecKey_Hex($p0,$p1) {
		return SKY_cipher_SecKey_Hex($p0,$p1);
	}

	static function SKY_cipher_ECDH($p0,$p1,$p2) {
		return SKY_cipher_ECDH($p0,$p1,$p2);
	}

	static function SKY_cipher_NewSig($p0,$p1) {
		return SKY_cipher_NewSig($p0,$p1);
	}

	static function SKY_cipher_SigFromHex($p0,$p1) {
		return SKY_cipher_SigFromHex($p0,$p1);
	}

	static function SKY_cipher_Sig_Hex($p0,$p1) {
		return SKY_cipher_Sig_Hex($p0,$p1);
	}

	static function SKY_cipher_SignHash($p0,$p1,$p2) {
		return SKY_cipher_SignHash($p0,$p1,$p2);
	}

	static function SKY_cipher_VerifyAddressSignedHash($p0,$p1,$p2) {
		return SKY_cipher_VerifyAddressSignedHash($p0,$p1,$p2);
	}

	static function SKY_cipher_VerifyPubKeySignedHash($p0,$p1,$p2) {
		return SKY_cipher_VerifyPubKeySignedHash($p0,$p1,$p2);
	}

	static function SKY_cipher_GenerateKeyPair($p0,$p1) {
		return SKY_cipher_GenerateKeyPair($p0,$p1);
	}

	static function SKY_cipher_GenerateDeterministicKeyPair($p0,$p1,$p2) {
		return SKY_cipher_GenerateDeterministicKeyPair($p0,$p1,$p2);
	}

	static function SKY_cipher_DeterministicKeyPairIterator($p0,$p1,$p2,$p3) {
		return SKY_cipher_DeterministicKeyPairIterator($p0,$p1,$p2,$p3);
	}

	static function SKY_cipher_GenerateDeterministicKeyPairs($p0,$p1,$p2) {
		return SKY_cipher_GenerateDeterministicKeyPairs($p0,$p1,$p2);
	}

	static function SKY_cipher_GenerateDeterministicKeyPairsSeed($p0,$p1,$p2,$p3) {
		return SKY_cipher_GenerateDeterministicKeyPairsSeed($p0,$p1,$p2,$p3);
	}

	static function SKY_cipher_CheckSecKey($p0) {
		return SKY_cipher_CheckSecKey($p0);
	}

	static function SKY_cipher_CheckSecKeyHash($p0,$p1) {
		return SKY_cipher_CheckSecKeyHash($p0,$p1);
	}

	static function SKY_secp256k1_PubkeyFromSeckey($p0,$p1) {
		return SKY_secp256k1_PubkeyFromSeckey($p0,$p1);
	}

	static function SKY_secp256k1_VerifyPubkey($p0) {
		return SKY_secp256k1_VerifyPubkey($p0);
	}

	static function SKY_secp256k1_VerifySecKey($p0) {
		return SKY_secp256k1_VerifySecKey($p0);
	}

	static function SKY_secp256k1_ECDH($p0,$p1,$p2) {
		return SKY_secp256k1_ECDH($p0,$p1,$p2);
	}

	static function SKY_file_InitDataDir($p0,$p1) {
		return SKY_file_InitDataDir($p0,$p1);
	}

	static function SKY_file_UserHome($p0) {
		return SKY_file_UserHome($p0);
	}

	static function SKY_file_ResolveResourceDirectory($p0,$p1) {
		return SKY_file_ResolveResourceDirectory($p0,$p1);
	}

	static function SKY_file_DetermineResourcePath($p0,$p1,$p2,$p3) {
		return SKY_file_DetermineResourcePath($p0,$p1,$p2,$p3);
	}

	static function SKY_api_NewWalletResponse($p0,$p1) {
		return SKY_api_NewWalletResponse($p0,$p1);
	}

	static function SKY_map_Get($p0,$p1,$p2) {
		return SKY_map_Get($p0,$p1,$p2);
	}

	static function SKY_map_HasKey($p0,$p1) {
		return SKY_map_HasKey($p0,$p1);
	}

	static function SKY_map_Close($p0) {
		return SKY_map_Close($p0);
	}

	static function SKY_coin_NewBlock($p0,$p1,$p2,$p3,$p4,$p5) {
		return SKY_coin_NewBlock($p0,$p1,$p2,$p3,$p4,$p5);
	}

	static function SKY_coin_SignedBlock_VerifySignature($p0,$p1) {
		return SKY_coin_SignedBlock_VerifySignature($p0,$p1);
	}

	static function SKY_coin_NewGenesisBlock($p0,$p1,$p2,$p3) {
		return SKY_coin_NewGenesisBlock($p0,$p1,$p2,$p3);
	}

	static function SKY_coin_Block_HashHeader($p0,$p1) {
		return SKY_coin_Block_HashHeader($p0,$p1);
	}

	static function SKY_coin_Block_Time($p0,$p1) {
		return SKY_coin_Block_Time($p0,$p1);
	}

	static function SKY_coin_Block_Seq($p0,$p1) {
		return SKY_coin_Block_Seq($p0,$p1);
	}

	static function SKY_coin_Block_HashBody($p0,$p1) {
		return SKY_coin_Block_HashBody($p0,$p1);
	}

	static function SKY_coin_Block_Size($p0,$p1) {
		return SKY_coin_Block_Size($p0,$p1);
	}

	static function SKY_coin_NewBlockHeader($p0,$p1,$p2,$p3,$p4,$p5) {
		return SKY_coin_NewBlockHeader($p0,$p1,$p2,$p3,$p4,$p5);
	}

	static function SKY_coin_BlockHeader_Hash($p0,$p1) {
		return SKY_coin_BlockHeader_Hash($p0,$p1);
	}

	static function SKY_coin_BlockHeader_Bytes($p0,$p1) {
		return SKY_coin_BlockHeader_Bytes($p0,$p1);
	}

	static function SKY_coin_BlockBody_Hash($p0,$p1) {
		return SKY_coin_BlockBody_Hash($p0,$p1);
	}

	static function SKY_coin_BlockBody_Size($p0,$p1) {
		return SKY_coin_BlockBody_Size($p0,$p1);
	}

	static function SKY_coin_BlockBody_Bytes($p0,$p1) {
		return SKY_coin_BlockBody_Bytes($p0,$p1);
	}

	static function SKY_coin_CreateUnspents($p0,$p1,$p2) {
		return SKY_coin_CreateUnspents($p0,$p1,$p2);
	}

	static function SKY_coin_CreateUnspent($p0,$p1,$p2,$p3) {
		return SKY_coin_CreateUnspent($p0,$p1,$p2,$p3);
	}

	static function SKY_coin_GetBlockObject($p0,$p1) {
		return SKY_coin_GetBlockObject($p0,$p1);
	}

	static function SKY_coin_GetBlockBody($p0,$p1) {
		return SKY_coin_GetBlockBody($p0,$p1);
	}

	static function SKY_coin_NewEmptyBlock($p0,$p1) {
		return SKY_coin_NewEmptyBlock($p0,$p1);
	}

	static function SKY_coin_Block_GetBlockHeader($p0,$p1) {
		return SKY_coin_Block_GetBlockHeader($p0,$p1);
	}

	static function SKY_coin_GetBlockHeaderObject($p0,$p1) {
		return SKY_coin_GetBlockHeaderObject($p0,$p1);
	}

	static function SKY_coin_BlockHeader_Time($p0,$p1) {
		return SKY_coin_BlockHeader_Time($p0,$p1);
	}

	static function SKY_coin_BlockHeader_BkSeq($p0,$p1) {
		return SKY_coin_BlockHeader_BkSeq($p0,$p1);
	}

	static function SKY_coin_BlockHeader_UxHash($p0,$p1) {
		return SKY_coin_BlockHeader_UxHash($p0,$p1);
	}

	static function SKY_coin_BlockHeader_Fee($p0,$p1) {
		return SKY_coin_BlockHeader_Fee($p0,$p1);
	}

	static function SKY_coin_BlockBody_Transactions($p0,$p1) {
		return SKY_coin_BlockBody_Transactions($p0,$p1);
	}

	static function SKY_coin_BlockHeader_SetTime($p0,$p1) {
		return SKY_coin_BlockHeader_SetTime($p0,$p1);
	}

	static function SKY_coin_BlockHeader_SetBkSeq($p0,$p1) {
		return SKY_coin_BlockHeader_SetBkSeq($p0,$p1);
	}

	static function SKY_coin_BlockHeader_SetFee($p0,$p1) {
		return SKY_coin_BlockHeader_SetFee($p0,$p1);
	}

	static function SKY_coin_BlockHeader_SetVersion($p0,$p1) {
		return SKY_coin_BlockHeader_SetVersion($p0,$p1);
	}

	static function SKY_coin_BlockHeader_Version($p0,$p1) {
		return SKY_coin_BlockHeader_Version($p0,$p1);
	}

	static function SKY_coin_BlockHeader_PrevHash($p0,$p1) {
		return SKY_coin_BlockHeader_PrevHash($p0,$p1);
	}

	static function SKY_droplet_FromString($p0,$p1) {
		return SKY_droplet_FromString($p0,$p1);
	}

	static function SKY_droplet_ToString($p0,$p1) {
		return SKY_droplet_ToString($p0,$p1);
	}

	static function SKY_wallet_CryptoTypeFromString($p0,$p1) {
		return SKY_wallet_CryptoTypeFromString($p0,$p1);
	}

	static function SKY_cipher_DecodeBase58Address($p0,$p1) {
		return SKY_cipher_DecodeBase58Address($p0,$p1);
	}

	static function SKY_cipher_AddressFromBytes($p0,$p1) {
		return SKY_cipher_AddressFromBytes($p0,$p1);
	}

	static function SKY_cipher_AddressFromPubKey($p0,$p1) {
		return SKY_cipher_AddressFromPubKey($p0,$p1);
	}

	static function SKY_cipher_AddressFromSecKey($p0,$p1) {
		return SKY_cipher_AddressFromSecKey($p0,$p1);
	}

	static function SKY_cipher_Address_Null($p0,$p1) {
		return SKY_cipher_Address_Null($p0,$p1);
	}

	static function SKY_cipher_Address_Bytes($p0,$p1) {
		return SKY_cipher_Address_Bytes($p0,$p1);
	}

	static function SKY_cipher_Address_Verify($p0,$p1) {
		return SKY_cipher_Address_Verify($p0,$p1);
	}

	static function SKY_cipher_Address_String($p0,$p1) {
		return SKY_cipher_Address_String($p0,$p1);
	}

	static function SKY_cipher_Address_Checksum($p0,$p1) {
		return SKY_cipher_Address_Checksum($p0,$p1);
	}

	static function SKY_cipher_Ripemd160_Set($p0,$p1) {
		return SKY_cipher_Ripemd160_Set($p0,$p1);
	}

	static function SKY_cipher_HashRipemd160($p0,$p1) {
		return SKY_cipher_HashRipemd160($p0,$p1);
	}

	static function SKY_cipher_SHA256_Set($p0,$p1) {
		return SKY_cipher_SHA256_Set($p0,$p1);
	}

	static function SKY_cipher_SHA256_Hex($p0,$p1) {
		return SKY_cipher_SHA256_Hex($p0,$p1);
	}

	static function SKY_cipher_SHA256_Xor($p0,$p1,$p2) {
		return SKY_cipher_SHA256_Xor($p0,$p1,$p2);
	}

	static function SKY_cipher_SumSHA256($p0,$p1) {
		return SKY_cipher_SumSHA256($p0,$p1);
	}

	static function SKY_cipher_SHA256FromHex($p0,$p1) {
		return SKY_cipher_SHA256FromHex($p0,$p1);
	}

	static function SKY_cipher_DoubleSHA256($p0,$p1) {
		return SKY_cipher_DoubleSHA256($p0,$p1);
	}

	static function SKY_cipher_AddSHA256($p0,$p1,$p2) {
		return SKY_cipher_AddSHA256($p0,$p1,$p2);
	}

	static function SKY_cipher_Merkle($p0,$p1) {
		return SKY_cipher_Merkle($p0,$p1);
	}

	static function SKY_cipher_SHA256_Null($p0,$p1) {
		return SKY_cipher_SHA256_Null($p0,$p1);
	}

	static function SKY_wallet_NewError($p0) {
		return SKY_wallet_NewError($p0);
	}

	static function SKY_wallet_NewWallet($p0,$p1,$p2) {
		return SKY_wallet_NewWallet($p0,$p1,$p2);
	}

	static function SKY_wallet_Wallet_Lock($p0,$p1,$p2) {
		return SKY_wallet_Wallet_Lock($p0,$p1,$p2);
	}

	static function SKY_wallet_Wallet_Unlock($p0,$p1,$p2) {
		return SKY_wallet_Wallet_Unlock($p0,$p1,$p2);
	}

	static function SKY_wallet_Load($p0,$p1) {
		return SKY_wallet_Load($p0,$p1);
	}

	static function SKY_wallet_Wallet_Save($p0,$p1) {
		return SKY_wallet_Wallet_Save($p0,$p1);
	}

	static function SKY_wallet_Wallet_Validate($p0) {
		return SKY_wallet_Wallet_Validate($p0);
	}

	static function SKY_wallet_Wallet_Type($p0,$p1) {
		return SKY_wallet_Wallet_Type($p0,$p1);
	}

	static function SKY_wallet_Wallet_Version($p0,$p1) {
		return SKY_wallet_Wallet_Version($p0,$p1);
	}

	static function SKY_wallet_Wallet_Filename($p0,$p1) {
		return SKY_wallet_Wallet_Filename($p0,$p1);
	}

	static function SKY_wallet_Wallet_Label($p0,$p1) {
		return SKY_wallet_Wallet_Label($p0,$p1);
	}

	static function SKY_wallet_Wallet_IsEncrypted($p0,$p1) {
		return SKY_wallet_Wallet_IsEncrypted($p0,$p1);
	}

	static function SKY_wallet_Wallet_GenerateAddresses($p0,$p1,$p2) {
		return SKY_wallet_Wallet_GenerateAddresses($p0,$p1,$p2);
	}

	static function SKY_wallet_Wallet_GetAddresses($p0,$p1) {
		return SKY_wallet_Wallet_GetAddresses($p0,$p1);
	}

	static function SKY_wallet_Wallet_GetEntry($p0,$p1,$p2,$p3) {
		return SKY_wallet_Wallet_GetEntry($p0,$p1,$p2,$p3);
	}

	static function SKY_wallet_Wallet_AddEntry($p0,$p1) {
		return SKY_wallet_Wallet_AddEntry($p0,$p1);
	}

	static function SKY_api_NewCreateTransactionResponse($p0,$p1,$p2) {
		return SKY_api_NewCreateTransactionResponse($p0,$p1,$p2);
	}

	static function SKY_api_NewCreatedTransaction($p0,$p1,$p2) {
		return SKY_api_NewCreatedTransaction($p0,$p1,$p2);
	}

	static function SKY_api_CreatedTransaction_ToTransaction($p0,$p1) {
		return SKY_api_CreatedTransaction_ToTransaction($p0,$p1);
	}

	static function SKY_api_NewCreatedTransactionOutput($p0,$p1,$p2) {
		return SKY_api_NewCreatedTransactionOutput($p0,$p1,$p2);
	}

	static function SKY_api_NewCreatedTransactionInput($p0,$p1) {
		return SKY_api_NewCreatedTransactionInput($p0,$p1);
	}

	static function SKY_wallet_NewReadableEntry($p0,$p1,$p2) {
		return SKY_wallet_NewReadableEntry($p0,$p1,$p2);
	}

	static function SKY_wallet_LoadReadableWallet($p0,$p1) {
		return SKY_wallet_LoadReadableWallet($p0,$p1);
	}

	static function SKY_wallet_ReadableWallet_Save($p0,$p1) {
		return SKY_wallet_ReadableWallet_Save($p0,$p1);
	}

	static function SKY_wallet_ReadableWallet_Load($p0,$p1) {
		return SKY_wallet_ReadableWallet_Load($p0,$p1);
	}

	static function SKY_wallet_ReadableWallet_Erase($p0) {
		return SKY_wallet_ReadableWallet_Erase($p0);
	}

	static function SKY_encrypt_ScryptChacha20poly1305_Encrypt($p0,$p1,$p2,$p3) {
		return SKY_encrypt_ScryptChacha20poly1305_Encrypt($p0,$p1,$p2,$p3);
	}

	static function SKY_encrypt_ScryptChacha20poly1305_Decrypt($p0,$p1,$p2,$p3) {
		return SKY_encrypt_ScryptChacha20poly1305_Decrypt($p0,$p1,$p2,$p3);
	}

	static function SKY_cli_GenerateAddressesInFile($p0,$p1,$p2,$p3) {
		return SKY_cli_GenerateAddressesInFile($p0,$p1,$p2,$p3);
	}

	static function SKY_cli_FormatAddressesAsJSON($p0,$p1) {
		return SKY_cli_FormatAddressesAsJSON($p0,$p1);
	}

	static function SKY_cli_FormatAddressesAsJoinedArray($p0,$p1) {
		return SKY_cli_FormatAddressesAsJoinedArray($p0,$p1);
	}

	static function SKY_cli_AddressesToStrings($p0,$p1) {
		return SKY_cli_AddressesToStrings($p0,$p1);
	}

	static function SKY_handle_close($p0) {
		SKY_handle_close($p0);
	}

	static function SKY_handle_copy($p0,$p1) {
		return SKY_handle_copy($p0,$p1);
	}

	static function SKY_iputil_LocalhostIP($p0) {
		return SKY_iputil_LocalhostIP($p0);
	}

	static function SKY_iputil_IsLocalhost($p0,$p1) {
		return SKY_iputil_IsLocalhost($p0,$p1);
	}

	static function SKY_iputil_SplitAddr($p0,$p1,$p2) {
		return SKY_iputil_SplitAddr($p0,$p1,$p2);
	}

	static function SKY_cli_NewTransaction($p0,$p1,$p2,$p3) {
		return SKY_cli_NewTransaction($p0,$p1,$p2,$p3);
	}

	static function SKY_transaction_DistributeCoinHoursProportional($p0,$p1,$p2) {
		return SKY_transaction_DistributeCoinHoursProportional($p0,$p1,$p2);
	}

	static function SKY_transaction_DistributeSpendHours($p0,$p1,$p2,$p3,$p4,$p5) {
		return SKY_transaction_DistributeSpendHours($p0,$p1,$p2,$p3,$p4,$p5);
	}

	static function SKY_base58_Hex2Base58($p0,$p1) {
		return SKY_base58_Hex2Base58($p0,$p1);
	}

	static function SKY_base58_Encode($p0,$p1) {
		return SKY_base58_Encode($p0,$p1);
	}

	static function SKY_base58_Decode($p0,$p1) {
		return SKY_base58_Decode($p0,$p1);
	}

	static function SKY_base58_String2Hex($p0,$p1) {
		return SKY_base58_String2Hex($p0,$p1);
	}

	static function SKY_api_NewClient($p0,$p1) {
		return SKY_api_NewClient($p0,$p1);
	}

	static function SKY_api_Client_CSRF($p0,$p1) {
		return SKY_api_Client_CSRF($p0,$p1);
	}

	static function SKY_api_Client_Version($p0,$p1) {
		return SKY_api_Client_Version($p0,$p1);
	}

	static function SKY_api_Client_Outputs($p0,$p1) {
		return SKY_api_Client_Outputs($p0,$p1);
	}

	static function SKY_api_Client_OutputsForAddresses($p0,$p1,$p2) {
		return SKY_api_Client_OutputsForAddresses($p0,$p1,$p2);
	}

	static function SKY_api_Client_OutputsForHashes($p0,$p1,$p2) {
		return SKY_api_Client_OutputsForHashes($p0,$p1,$p2);
	}

	static function SKY_api_Client_CoinSupply($p0,$p1) {
		return SKY_api_Client_CoinSupply($p0,$p1);
	}

	static function SKY_api_Client_BlockByHash($p0,$p1,$p2) {
		return SKY_api_Client_BlockByHash($p0,$p1,$p2);
	}

	static function SKY_api_Client_BlockBySeq($p0,$p1,$p2) {
		return SKY_api_Client_BlockBySeq($p0,$p1,$p2);
	}

	static function SKY_api_Client_Blocks($p0,$p1,$p2) {
		return SKY_api_Client_Blocks($p0,$p1,$p2);
	}

	static function SKY_api_Client_LastBlocks($p0,$p1,$p2) {
		return SKY_api_Client_LastBlocks($p0,$p1,$p2);
	}

	static function SKY_api_Client_BlockchainMetadata($p0,$p1) {
		return SKY_api_Client_BlockchainMetadata($p0,$p1);
	}

	static function SKY_api_Client_BlockchainProgress($p0,$p1) {
		return SKY_api_Client_BlockchainProgress($p0,$p1);
	}

	static function SKY_api_Client_Balance($p0,$p1,$p2) {
		return SKY_api_Client_Balance($p0,$p1,$p2);
	}

	static function SKY_api_Client_UxOut($p0,$p1,$p2) {
		return SKY_api_Client_UxOut($p0,$p1,$p2);
	}

	static function SKY_api_Client_AddressUxOuts($p0,$p1,$p2) {
		return SKY_api_Client_AddressUxOuts($p0,$p1,$p2);
	}

	static function SKY_api_Client_Wallet($p0,$p1,$p2) {
		return SKY_api_Client_Wallet($p0,$p1,$p2);
	}

	static function SKY_api_Client_Wallets($p0,$p1) {
		return SKY_api_Client_Wallets($p0,$p1);
	}

	static function SKY_api_Client_CreateUnencryptedWallet($p0,$p1,$p2,$p3,$p4) {
		return SKY_api_Client_CreateUnencryptedWallet($p0,$p1,$p2,$p3,$p4);
	}

	static function SKY_api_Client_CreateEncryptedWallet($p0,$p1,$p2,$p3,$p4,$p5) {
		return SKY_api_Client_CreateEncryptedWallet($p0,$p1,$p2,$p3,$p4,$p5);
	}

	static function SKY_api_Client_NewWalletAddress($p0,$p1,$p2,$p3,$p4) {
		return SKY_api_Client_NewWalletAddress($p0,$p1,$p2,$p3,$p4);
	}

	static function SKY_api_Client_WalletBalance($p0,$p1,$p2) {
		return SKY_api_Client_WalletBalance($p0,$p1,$p2);
	}

	static function SKY_api_Client_CreateTransaction($p0,$p1,$p2) {
		return SKY_api_Client_CreateTransaction($p0,$p1,$p2);
	}

	static function SKY_api_Client_UpdateWallet($p0,$p1,$p2) {
		return SKY_api_Client_UpdateWallet($p0,$p1,$p2);
	}

	static function SKY_api_Client_WalletFolderName($p0,$p1) {
		return SKY_api_Client_WalletFolderName($p0,$p1);
	}

	static function SKY_api_Client_NewSeed($p0,$p1,$p2) {
		return SKY_api_Client_NewSeed($p0,$p1,$p2);
	}

	static function SKY_api_Client_WalletSeed($p0,$p1,$p2,$p3) {
		return SKY_api_Client_WalletSeed($p0,$p1,$p2,$p3);
	}

	static function SKY_api_Client_NetworkConnection($p0,$p1,$p2) {
		return SKY_api_Client_NetworkConnection($p0,$p1,$p2);
	}

	static function SKY_api_Client_NetworkConnections($p0,$p1,$p2) {
		return SKY_api_Client_NetworkConnections($p0,$p1,$p2);
	}

	static function SKY_api_Client_NetworkDefaultPeers($p0,$p1) {
		return SKY_api_Client_NetworkDefaultPeers($p0,$p1);
	}

	static function SKY_api_Client_NetworkTrustedPeers($p0,$p1) {
		return SKY_api_Client_NetworkTrustedPeers($p0,$p1);
	}

	static function SKY_api_Client_NetworkExchangedPeers($p0,$p1) {
		return SKY_api_Client_NetworkExchangedPeers($p0,$p1);
	}

	static function SKY_api_Client_PendingTransactions($p0,$p1) {
		return SKY_api_Client_PendingTransactions($p0,$p1);
	}

	static function SKY_api_Client_Transaction($p0,$p1,$p2) {
		return SKY_api_Client_Transaction($p0,$p1,$p2);
	}

	static function SKY_api_Client_Transactions($p0,$p1,$p2) {
		return SKY_api_Client_Transactions($p0,$p1,$p2);
	}

	static function SKY_api_Client_ConfirmedTransactions($p0,$p1,$p2) {
		return SKY_api_Client_ConfirmedTransactions($p0,$p1,$p2);
	}

	static function SKY_api_Client_UnconfirmedTransactions($p0,$p1,$p2) {
		return SKY_api_Client_UnconfirmedTransactions($p0,$p1,$p2);
	}

	static function SKY_api_Client_InjectTransaction($p0,$p1,$p2) {
		return SKY_api_Client_InjectTransaction($p0,$p1,$p2);
	}

	static function SKY_api_Client_ResendUnconfirmedTransactions($p0,$p1) {
		return SKY_api_Client_ResendUnconfirmedTransactions($p0,$p1);
	}

	static function SKY_api_Client_RawTransaction($p0,$p1,$p2) {
		return SKY_api_Client_RawTransaction($p0,$p1,$p2);
	}

	static function SKY_api_Client_Richlist($p0,$p1,$p2) {
		return SKY_api_Client_Richlist($p0,$p1,$p2);
	}

	static function SKY_api_Client_AddressCount($p0,$p1) {
		return SKY_api_Client_AddressCount($p0,$p1);
	}

	static function SKY_api_Client_UnloadWallet($p0,$p1) {
		return SKY_api_Client_UnloadWallet($p0,$p1);
	}

	static function SKY_api_Client_Health($p0,$p1) {
		return SKY_api_Client_Health($p0,$p1);
	}

	static function SKY_api_Client_EncryptWallet($p0,$p1,$p2,$p3) {
		return SKY_api_Client_EncryptWallet($p0,$p1,$p2,$p3);
	}

	static function SKY_api_Client_DecryptWallet($p0,$p1,$p2,$p3) {
		return SKY_api_Client_DecryptWallet($p0,$p1,$p2,$p3);
	}

	static function SKY_coin_Create_Transaction($p0) {
		return SKY_coin_Create_Transaction($p0);
	}

	static function SKY_coin_Transaction_Copy($p0,$p1) {
		return SKY_coin_Transaction_Copy($p0,$p1);
	}

	static function SKY_coin_GetTransactionObject($p0,$p1) {
		return SKY_coin_GetTransactionObject($p0,$p1);
	}

	static function SKY_coin_Transaction_ResetInputs($p0,$p1) {
		return SKY_coin_Transaction_ResetInputs($p0,$p1);
	}

	static function SKY_coin_Transaction_GetInputsCount($p0,$p1) {
		return SKY_coin_Transaction_GetInputsCount($p0,$p1);
	}

	static function SKY_coin_Transaction_GetInputAt($p0,$p1,$p2) {
		return SKY_coin_Transaction_GetInputAt($p0,$p1,$p2);
	}

	static function SKY_coin_Transaction_SetInputAt($p0,$p1,$p2) {
		return SKY_coin_Transaction_SetInputAt($p0,$p1,$p2);
	}

	static function SKY_coin_Transaction_GetOutputsCount($p0,$p1) {
		return SKY_coin_Transaction_GetOutputsCount($p0,$p1);
	}

	static function SKY_coin_Transaction_GetOutputAt($p0,$p1,$p2) {
		return SKY_coin_Transaction_GetOutputAt($p0,$p1,$p2);
	}

	static function SKY_coin_Transaction_SetOutputAt($p0,$p1,$p2) {
		return SKY_coin_Transaction_SetOutputAt($p0,$p1,$p2);
	}

	static function SKY_coin_Transaction_GetSignaturesCount($p0,$p1) {
		return SKY_coin_Transaction_GetSignaturesCount($p0,$p1);
	}

	static function SKY_coin_Transaction_GetSignatureAt($p0,$p1,$p2) {
		return SKY_coin_Transaction_GetSignatureAt($p0,$p1,$p2);
	}

	static function SKY_coin_Transaction_SetSignatureAt($p0,$p1,$p2) {
		return SKY_coin_Transaction_SetSignatureAt($p0,$p1,$p2);
	}

	static function SKY_coin_Transaction_PushSignature($p0,$p1) {
		return SKY_coin_Transaction_PushSignature($p0,$p1);
	}

	static function SKY_coin_Transaction_ResetOutputs($p0,$p1) {
		return SKY_coin_Transaction_ResetOutputs($p0,$p1);
	}

	static function SKY_coin_Transaction_ResetSignatures($p0,$p1) {
		return SKY_coin_Transaction_ResetSignatures($p0,$p1);
	}

	static function SKY_coin_Transaction_Verify($p0) {
		return SKY_coin_Transaction_Verify($p0);
	}

	static function SKY_coin_Transaction_PushInput($p0,$p1) {
		return SKY_coin_Transaction_PushInput($p0,$p1);
	}

	static function SKY_coin_TransactionOutput_UxID($p0,$p1,$p2) {
		return SKY_coin_TransactionOutput_UxID($p0,$p1,$p2);
	}

	static function SKY_coin_Transaction_PushOutput($p0,$p1,$p2,$p3) {
		return SKY_coin_Transaction_PushOutput($p0,$p1,$p2,$p3);
	}

	static function SKY_coin_Transaction_SignInputs($p0,$p1) {
		return SKY_coin_Transaction_SignInputs($p0,$p1);
	}

	static function SKY_coin_Transaction_Size($p0,$p1) {
		return SKY_coin_Transaction_Size($p0,$p1);
	}

	static function SKY_coin_Transaction_Hash($p0,$p1) {
		return SKY_coin_Transaction_Hash($p0,$p1);
	}

	static function SKY_coin_Transaction_SizeHash($p0,$p1,$p2) {
		return SKY_coin_Transaction_SizeHash($p0,$p1,$p2);
	}

	static function SKY_coin_Transaction_UpdateHeader($p0) {
		return SKY_coin_Transaction_UpdateHeader($p0);
	}

	static function SKY_coin_Transaction_HashInner($p0,$p1) {
		return SKY_coin_Transaction_HashInner($p0,$p1);
	}

	static function SKY_coin_Transaction_Serialize($p0,$p1) {
		return SKY_coin_Transaction_Serialize($p0,$p1);
	}

	static function SKY_coin_TransactionDeserialize($p0,$p1) {
		return SKY_coin_TransactionDeserialize($p0,$p1);
	}

	static function SKY_coin_Transaction_OutputHours($p0,$p1) {
		return SKY_coin_Transaction_OutputHours($p0,$p1);
	}

	static function SKY_coin_Create_Transactions($p0) {
		return SKY_coin_Create_Transactions($p0);
	}

	static function SKY_coin_GetTransactionsObject($p0,$p1) {
		return SKY_coin_GetTransactionsObject($p0,$p1);
	}

	static function SKY_coin_Transactions_Length($p0,$p1) {
		return SKY_coin_Transactions_Length($p0,$p1);
	}

	static function SKY_coin_Transactions_Add($p0,$p1) {
		return SKY_coin_Transactions_Add($p0,$p1);
	}

	static function SKY_coin_Transactions_Fees($p0,$p1,$p2) {
		return SKY_coin_Transactions_Fees($p0,$p1,$p2);
	}

	static function SKY_coin_Transactions_GetAt($p0,$p1,$p2) {
		return SKY_coin_Transactions_GetAt($p0,$p1,$p2);
	}

	static function SKY_coin_Transactions_Hashes($p0,$p1) {
		return SKY_coin_Transactions_Hashes($p0,$p1);
	}

	static function SKY_coin_Transactions_Size($p0,$p1) {
		return SKY_coin_Transactions_Size($p0,$p1);
	}

	static function SKY_coin_Transactions_TruncateBytesTo($p0,$p1,$p2) {
		return SKY_coin_Transactions_TruncateBytesTo($p0,$p1,$p2);
	}

	static function SKY_coin_SortTransactions($p0,$p1,$p2) {
		return SKY_coin_SortTransactions($p0,$p1,$p2);
	}

	static function SKY_coin_NewSortableTransactions($p0,$p1,$p2) {
		return SKY_coin_NewSortableTransactions($p0,$p1,$p2);
	}

	static function SKY_coin_SortableTransactions_Sort($p0) {
		return SKY_coin_SortableTransactions_Sort($p0);
	}

	static function SKY_coin_SortableTransactions_Len($p0,$p1) {
		return SKY_coin_SortableTransactions_Len($p0,$p1);
	}

	static function SKY_coin_SortableTransactions_Less($p0,$p1,$p2,$p3) {
		return SKY_coin_SortableTransactions_Less($p0,$p1,$p2,$p3);
	}

	static function SKY_coin_SortableTransactions_Swap($p0,$p1,$p2) {
		return SKY_coin_SortableTransactions_Swap($p0,$p1,$p2);
	}

	static function SKY_coin_VerifyTransactionCoinsSpending($p0,$p1) {
		return SKY_coin_VerifyTransactionCoinsSpending($p0,$p1);
	}

	static function SKY_coin_VerifyTransactionHoursSpending($p0,$p1,$p2) {
		return SKY_coin_VerifyTransactionHoursSpending($p0,$p1,$p2);
	}

	static function SKY_coin_VerifyInputSignatures($p0,$p1) {
		return SKY_coin_VerifyInputSignatures($p0,$p1);
	}

	static function SKY_params_GetDistributionAddresses($p0) {
		SKY_params_GetDistributionAddresses($p0);
	}

	static function SKY_params_GetUnlockedDistributionAddresses($p0) {
		SKY_params_GetUnlockedDistributionAddresses($p0);
	}

	static function SKY_params_GetLockedDistributionAddresses($p0) {
		SKY_params_GetLockedDistributionAddresses($p0);
	}

	static function SKY_bip39_NewDefaultMnemomic($p0) {
		return SKY_bip39_NewDefaultMnemomic($p0);
	}

	static function SKY_bip39_NewEntropy($p0,$p1) {
		return SKY_bip39_NewEntropy($p0,$p1);
	}

	static function SKY_bip39_NewMnemonic($p0,$p1) {
		return SKY_bip39_NewMnemonic($p0,$p1);
	}

	static function SKY_bip39_ValidateMnemonic($p0) {
		return SKY_bip39_ValidateMnemonic($p0);
	}

	static function SKY_bip39_NewSeed($p0,$p1,$p2) {
		return SKY_bip39_NewSeed($p0,$p1,$p2);
	}

	static function SKY_coin_UxOut_Hash($p0,$p1) {
		return SKY_coin_UxOut_Hash($p0,$p1);
	}

	static function SKY_coin_UxOut_SnapshotHash($p0,$p1) {
		return SKY_coin_UxOut_SnapshotHash($p0,$p1);
	}

	static function SKY_coin_UxBody_Hash($p0,$p1) {
		return SKY_coin_UxBody_Hash($p0,$p1);
	}

	static function SKY_coin_UxOut_CoinHours($p0,$p1,$p2) {
		return SKY_coin_UxOut_CoinHours($p0,$p1,$p2);
	}

	static function SKY_coin_UxArray_Hashes($p0,$p1) {
		return SKY_coin_UxArray_Hashes($p0,$p1);
	}

	static function SKY_coin_UxArray_HasDupes($p0,$p1) {
		return SKY_coin_UxArray_HasDupes($p0,$p1);
	}

	static function SKY_coin_UxArray_Sort($p0) {
		return SKY_coin_UxArray_Sort($p0);
	}

	static function SKY_coin_UxArray_Len($p0,$p1) {
		return SKY_coin_UxArray_Len($p0,$p1);
	}

	static function SKY_coin_UxArray_Less($p0,$p1,$p2,$p3) {
		return SKY_coin_UxArray_Less($p0,$p1,$p2,$p3);
	}

	static function SKY_coin_UxArray_Swap($p0,$p1,$p2) {
		return SKY_coin_UxArray_Swap($p0,$p1,$p2);
	}

	static function SKY_coin_UxArray_Coins($p0,$p1) {
		return SKY_coin_UxArray_Coins($p0,$p1);
	}

	static function SKY_coin_UxArray_CoinHours($p0,$p1,$p2) {
		return SKY_coin_UxArray_CoinHours($p0,$p1,$p2);
	}

	static function SKY_coin_UxArray_Sub($p0,$p1,$p2) {
		return SKY_coin_UxArray_Sub($p0,$p1,$p2);
	}

	static function SKY_coin_UxArray_Add($p0,$p1,$p2) {
		return SKY_coin_UxArray_Add($p0,$p1,$p2);
	}

	static function SKY_coin_NewAddressUxOuts($p0,$p1) {
		return SKY_coin_NewAddressUxOuts($p0,$p1);
	}

	static function SKY_coin_AddressUxOuts_Keys($p0,$p1) {
		return SKY_coin_AddressUxOuts_Keys($p0,$p1);
	}

	static function SKY_coin_AddressUxOuts_Flatten($p0,$p1) {
		return SKY_coin_AddressUxOuts_Flatten($p0,$p1);
	}

	static function SKY_coin_AddressUxOuts_Sub($p0,$p1,$p2) {
		return SKY_coin_AddressUxOuts_Sub($p0,$p1,$p2);
	}

	static function SKY_coin_AddressUxOuts_Add($p0,$p1,$p2) {
		return SKY_coin_AddressUxOuts_Add($p0,$p1,$p2);
	}

	static function SKY_coin_AddressUxOuts_Get($p0,$p1,$p2) {
		return SKY_coin_AddressUxOuts_Get($p0,$p1,$p2);
	}

	static function SKY_coin_AddressUxOuts_HasKey($p0,$p1,$p2) {
		return SKY_coin_AddressUxOuts_HasKey($p0,$p1,$p2);
	}

	static function SKY_coin_AddressUxOuts_GetOutputLength($p0,$p1,$p2) {
		return SKY_coin_AddressUxOuts_GetOutputLength($p0,$p1,$p2);
	}

	static function SKY_coin_AddressUxOuts_Length($p0,$p1) {
		return SKY_coin_AddressUxOuts_Length($p0,$p1);
	}

	static function SKY_coin_AddressUxOuts_Set($p0,$p1,$p2) {
		return SKY_coin_AddressUxOuts_Set($p0,$p1,$p2);
	}

	static function SKY_params_DropletPrecisionToDivisor($p0) {
		return SKY_params_DropletPrecisionToDivisor($p0);
	}

	static function SKY_params_DropletPrecisionCheck($p0,$p1) {
		return SKY_params_DropletPrecisionCheck($p0,$p1);
	}

	const SKY_OK = SKY_OK;

	const SKY_ERROR = SKY_ERROR;

	const SKY_BAD_HANDLE = SKY_BAD_HANDLE;

	const SKY_INVALID_TIMESTRING = SKY_INVALID_TIMESTRING;

	const SKY_PKG_API = SKY_PKG_API;

	const SKY_PKG_CIPHER = SKY_PKG_CIPHER;

	const SKY_PKG_CLI = SKY_PKG_CLI;

	const SKY_PKG_COIN = SKY_PKG_COIN;

	const SKY_PKG_CONSENSUS = SKY_PKG_CONSENSUS;

	const SKY_PKG_DAEMON = SKY_PKG_DAEMON;

	const SKY_PKG_GUI = SKY_PKG_GUI;

	const SKY_PKG_SKYCOIN = SKY_PKG_SKYCOIN;

	const SKY_PKG_UTIL = SKY_PKG_UTIL;

	const SKY_PKG_VISOR = SKY_PKG_VISOR;

	const SKY_PKG_WALLET = SKY_PKG_WALLET;

	const SKY_PKG_PARAMS = SKY_PKG_PARAMS;

	const SKY_PKG_LIBCGO = SKY_PKG_LIBCGO;

	const SKY_ErrAddressInvalidLength = SKY_ErrAddressInvalidLength;

	const SKY_ErrAddressInvalidChecksum = SKY_ErrAddressInvalidChecksum;

	const SKY_ErrAddressInvalidVersion = SKY_ErrAddressInvalidVersion;

	const SKY_ErrAddressInvalidPubKey = SKY_ErrAddressInvalidPubKey;

	const SKY_ErrAddressInvalidFirstByte = SKY_ErrAddressInvalidFirstByte;

	const SKY_ErrAddressInvalidLastByte = SKY_ErrAddressInvalidLastByte;

	const SKY_ErrBufferUnderflow = SKY_ErrBufferUnderflow;

	const SKY_ErrInvalidOmitEmpty = SKY_ErrInvalidOmitEmpty;

	const SKY_ErrInvalidLengthPubKey = SKY_ErrInvalidLengthPubKey;

	const SKY_ErrPubKeyFromNullSecKey = SKY_ErrPubKeyFromNullSecKey;

	const SKY_ErrPubKeyFromBadSecKey = SKY_ErrPubKeyFromBadSecKey;

	const SKY_ErrInvalidLengthSecKey = SKY_ErrInvalidLengthSecKey;

	const SKY_ErrECHDInvalidPubKey = SKY_ErrECHDInvalidPubKey;

	const SKY_ErrECHDInvalidSecKey = SKY_ErrECHDInvalidSecKey;

	const SKY_ErrInvalidLengthSig = SKY_ErrInvalidLengthSig;

	const SKY_ErrInvalidLengthRipemd160 = SKY_ErrInvalidLengthRipemd160;

	const SKY_ErrInvalidLengthSHA256 = SKY_ErrInvalidLengthSHA256;

	const SKY_ErrInvalidBase58Char = SKY_ErrInvalidBase58Char;

	const SKY_ErrInvalidBase58String = SKY_ErrInvalidBase58String;

	const SKY_ErrInvalidBase58Length = SKY_ErrInvalidBase58Length;

	const SKY_ErrInvalidHexLength = SKY_ErrInvalidHexLength;

	const SKY_ErrInvalidBytesLength = SKY_ErrInvalidBytesLength;

	const SKY_ErrInvalidPubKey = SKY_ErrInvalidPubKey;

	const SKY_ErrInvalidSecKey = SKY_ErrInvalidSecKey;

	const SKY_ErrInvalidSigPubKeyRecovery = SKY_ErrInvalidSigPubKeyRecovery;

	const SKY_ErrInvalidSecKeyHex = SKY_ErrInvalidSecKeyHex;

	const SKY_ErrInvalidAddressForSig = SKY_ErrInvalidAddressForSig;

	const SKY_ErrInvalidHashForSig = SKY_ErrInvalidHashForSig;

	const SKY_ErrPubKeyRecoverMismatch = SKY_ErrPubKeyRecoverMismatch;

	const SKY_ErrInvalidSigInvalidPubKey = SKY_ErrInvalidSigInvalidPubKey;

	const SKY_ErrInvalidSigValidity = SKY_ErrInvalidSigValidity;

	const SKY_ErrInvalidSigForMessage = SKY_ErrInvalidSigForMessage;

	const SKY_ErrInvalidSecKyVerification = SKY_ErrInvalidSecKyVerification;

	const SKY_ErrNullPubKeyFromSecKey = SKY_ErrNullPubKeyFromSecKey;

	const SKY_ErrInvalidDerivedPubKeyFromSecKey = SKY_ErrInvalidDerivedPubKeyFromSecKey;

	const SKY_ErrInvalidPubKeyFromHash = SKY_ErrInvalidPubKeyFromHash;

	const SKY_ErrPubKeyFromSecKeyMismatch = SKY_ErrPubKeyFromSecKeyMismatch;

	const SKY_ErrInvalidLength = SKY_ErrInvalidLength;

	const SKY_ErrBitcoinWIFInvalidFirstByte = SKY_ErrBitcoinWIFInvalidFirstByte;

	const SKY_ErrBitcoinWIFInvalidSuffix = SKY_ErrBitcoinWIFInvalidSuffix;

	const SKY_ErrBitcoinWIFInvalidChecksum = SKY_ErrBitcoinWIFInvalidChecksum;

	const SKY_ErrEmptySeed = SKY_ErrEmptySeed;

	const SKY_ErrInvalidSig = SKY_ErrInvalidSig;

	const SKY_ErrMissingPassword = SKY_ErrMissingPassword;

	const SKY_ErrDataTooLarge = SKY_ErrDataTooLarge;

	const SKY_ErrInvalidChecksumLength = SKY_ErrInvalidChecksumLength;

	const SKY_ErrInvalidChecksum = SKY_ErrInvalidChecksum;

	const SKY_ErrInvalidNonceLength = SKY_ErrInvalidNonceLength;

	const SKY_ErrInvalidBlockSize = SKY_ErrInvalidBlockSize;

	const SKY_ErrReadDataHashFailed = SKY_ErrReadDataHashFailed;

	const SKY_ErrInvalidPassword = SKY_ErrInvalidPassword;

	const SKY_ErrReadDataLengthFailed = SKY_ErrReadDataLengthFailed;

	const SKY_ErrInvalidDataLength = SKY_ErrInvalidDataLength;

	const SKY_ErrTemporaryInsufficientBalance = SKY_ErrTemporaryInsufficientBalance;

	const SKY_ErrAddress = SKY_ErrAddress;

	const SKY_ErrWalletName = SKY_ErrWalletName;

	const SKY_ErrJSONMarshal = SKY_ErrJSONMarshal;

	const SKY_WalletLoadError = SKY_WalletLoadError;

	const SKY_WalletSaveError = SKY_WalletSaveError;

	const SKY_ErrAddEarnedCoinHoursAdditionOverflow = SKY_ErrAddEarnedCoinHoursAdditionOverflow;

	const SKY_ErrUint64MultOverflow = SKY_ErrUint64MultOverflow;

	const SKY_ErrUint64AddOverflow = SKY_ErrUint64AddOverflow;

	const SKY_ErrUint32AddOverflow = SKY_ErrUint32AddOverflow;

	const SKY_ErrUint64OverflowsInt64 = SKY_ErrUint64OverflowsInt64;

	const SKY_ErrInt64UnderflowsUint64 = SKY_ErrInt64UnderflowsUint64;

	const SKY_ErrIntUnderflowsUint32 = SKY_ErrIntUnderflowsUint32;

	const SKY_ErrIntOverflowsUint32 = SKY_ErrIntOverflowsUint32;

	const SKY_ErrPeerlistFull = SKY_ErrPeerlistFull;

	const SKY_ErrInvalidAddress = SKY_ErrInvalidAddress;

	const SKY_ErrNoLocalhost = SKY_ErrNoLocalhost;

	const SKY_ErrNotExternalIP = SKY_ErrNotExternalIP;

	const SKY_ErrPortTooLow = SKY_ErrPortTooLow;

	const SKY_ErrBlacklistedAddress = SKY_ErrBlacklistedAddress;

	const SKY_ErrDisconnectWriteFailed = SKY_ErrDisconnectWriteFailed;

	const SKY_ErrDisconnectSetReadDeadlineFailed = SKY_ErrDisconnectSetReadDeadlineFailed;

	const SKY_ErrDisconnectInvalidMessageLength = SKY_ErrDisconnectInvalidMessageLength;

	const SKY_ErrDisconnectMalformedMessage = SKY_ErrDisconnectMalformedMessage;

	const SKY_ErrDisconnectUnknownMessage = SKY_ErrDisconnectUnknownMessage;

	const SKY_ErrConnectionPoolClosed = SKY_ErrConnectionPoolClosed;

	const SKY_ErrWriteQueueFull = SKY_ErrWriteQueueFull;

	const SKY_ErrNoReachableConnections = SKY_ErrNoReachableConnections;

	const SKY_ErrMaxDefaultConnectionsReached = SKY_ErrMaxDefaultConnectionsReached;

	const SKY_ErrDisconnectVersionNotSupported = SKY_ErrDisconnectVersionNotSupported;

	const SKY_ErrDisconnectIntroductionTimeout = SKY_ErrDisconnectIntroductionTimeout;

	const SKY_ErrDisconnectIsBlacklisted = SKY_ErrDisconnectIsBlacklisted;

	const SKY_ErrDisconnectSelf = SKY_ErrDisconnectSelf;

	const SKY_ErrDisconnectConnectedTwice = SKY_ErrDisconnectConnectedTwice;

	const SKY_ErrDisconnectIdle = SKY_ErrDisconnectIdle;

	const SKY_ErrDisconnectNoIntroduction = SKY_ErrDisconnectNoIntroduction;

	const SKY_ErrDisconnectIPLimitReached = SKY_ErrDisconnectIPLimitReached;

	const SKY_ErrDisconnectMaxDefaultConnectionReached = SKY_ErrDisconnectMaxDefaultConnectionReached;

	const SKY_ErrDisconnectMaxOutgoingConnectionsReached = SKY_ErrDisconnectMaxOutgoingConnectionsReached;

	const SKY_ConnectionError = SKY_ConnectionError;

	const SKY_ErrTxnNoFee = SKY_ErrTxnNoFee;

	const SKY_ErrTxnInsufficientFee = SKY_ErrTxnInsufficientFee;

	const SKY_ErrTxnInsufficientCoinHours = SKY_ErrTxnInsufficientCoinHours;

	const SKY_ErrNegativeValue = SKY_ErrNegativeValue;

	const SKY_ErrTooManyDecimals = SKY_ErrTooManyDecimals;

	const SKY_ErrTooLarge = SKY_ErrTooLarge;

	const SKY_ErrEmptyDirectoryName = SKY_ErrEmptyDirectoryName;

	const SKY_ErrDotDirectoryName = SKY_ErrDotDirectoryName;

	const SKY_ErrHistoryDBCorrupted = SKY_ErrHistoryDBCorrupted;

	const SKY_ErrUxOutNotExist = SKY_ErrUxOutNotExist;

	const SKY_ErrNoHeadBlock = SKY_ErrNoHeadBlock;

	const SKY_ErrMissingSignature = SKY_ErrMissingSignature;

	const SKY_ErrUnspentNotExist = SKY_ErrUnspentNotExist;

	const SKY_ErrVerifyStopped = SKY_ErrVerifyStopped;

	const SKY_ErrCreateBucketFailed = SKY_ErrCreateBucketFailed;

	const SKY_ErrBucketNotExist = SKY_ErrBucketNotExist;

	const SKY_ErrTxnViolatesHardConstraint = SKY_ErrTxnViolatesHardConstraint;

	const SKY_ErrTxnViolatesSoftConstraint = SKY_ErrTxnViolatesSoftConstraint;

	const SKY_ErrTxnViolatesUserConstraint = SKY_ErrTxnViolatesUserConstraint;

	const SKY_ErrInsufficientBalance = SKY_ErrInsufficientBalance;

	const SKY_ErrInsufficientHours = SKY_ErrInsufficientHours;

	const SKY_ErrZeroSpend = SKY_ErrZeroSpend;

	const SKY_ErrSpendingUnconfirmed = SKY_ErrSpendingUnconfirmed;

	const SKY_ErrInvalidEncryptedField = SKY_ErrInvalidEncryptedField;

	const SKY_ErrWalletEncrypted = SKY_ErrWalletEncrypted;

	const SKY_ErrWalletNotEncrypted = SKY_ErrWalletNotEncrypted;

	const SKY_ErrWalletMissingPassword = SKY_ErrWalletMissingPassword;

	const SKY_ErrMissingEncrypt = SKY_ErrMissingEncrypt;

	const SKY_ErrWalletInvalidPassword = SKY_ErrWalletInvalidPassword;

	const SKY_ErrMissingSeed = SKY_ErrMissingSeed;

	const SKY_ErrMissingAuthenticated = SKY_ErrMissingAuthenticated;

	const SKY_ErrWrongCryptoType = SKY_ErrWrongCryptoType;

	const SKY_ErrWalletNotExist = SKY_ErrWalletNotExist;

	const SKY_ErrSeedUsed = SKY_ErrSeedUsed;

	const SKY_ErrWalletAPIDisabled = SKY_ErrWalletAPIDisabled;

	const SKY_ErrSeedAPIDisabled = SKY_ErrSeedAPIDisabled;

	const SKY_ErrWalletNameConflict = SKY_ErrWalletNameConflict;

	const SKY_ErrInvalidHoursSelectionMode = SKY_ErrInvalidHoursSelectionMode;

	const SKY_ErrInvalidHoursSelectionType = SKY_ErrInvalidHoursSelectionType;

	const SKY_ErrUnknownAddress = SKY_ErrUnknownAddress;

	const SKY_ErrUnknownUxOut = SKY_ErrUnknownUxOut;

	const SKY_ErrNoUnspents = SKY_ErrNoUnspents;

	const SKY_ErrNullChangeAddress = SKY_ErrNullChangeAddress;

	const SKY_ErrMissingTo = SKY_ErrMissingTo;

	const SKY_ErrZeroCoinsTo = SKY_ErrZeroCoinsTo;

	const SKY_ErrNullAddressTo = SKY_ErrNullAddressTo;

	const SKY_ErrDuplicateTo = SKY_ErrDuplicateTo;

	const SKY_ErrMissingWalletID = SKY_ErrMissingWalletID;

	const SKY_ErrIncludesNullAddress = SKY_ErrIncludesNullAddress;

	const SKY_ErrDuplicateAddresses = SKY_ErrDuplicateAddresses;

	const SKY_ErrZeroToHoursAuto = SKY_ErrZeroToHoursAuto;

	const SKY_ErrMissingModeAuto = SKY_ErrMissingModeAuto;

	const SKY_ErrInvalidHoursSelMode = SKY_ErrInvalidHoursSelMode;

	const SKY_ErrInvalidModeManual = SKY_ErrInvalidModeManual;

	const SKY_ErrInvalidHoursSelType = SKY_ErrInvalidHoursSelType;

	const SKY_ErrMissingShareFactor = SKY_ErrMissingShareFactor;

	const SKY_ErrInvalidShareFactor = SKY_ErrInvalidShareFactor;

	const SKY_ErrShareFactorOutOfRange = SKY_ErrShareFactorOutOfRange;

	const SKY_ErrWalletConstraint = SKY_ErrWalletConstraint;

	const SKY_ErrDuplicateUxOuts = SKY_ErrDuplicateUxOuts;

	const SKY_ErrUnknownWalletID = SKY_ErrUnknownWalletID;

	const SKY_ErrVerifySignatureInvalidInputsNils = SKY_ErrVerifySignatureInvalidInputsNils;

	const SKY_ErrVerifySignatureInvalidSigLength = SKY_ErrVerifySignatureInvalidSigLength;

	const SKY_ErrVerifySignatureInvalidPubkeysLength = SKY_ErrVerifySignatureInvalidPubkeysLength;

	const SKY_ErrInvalidDecimals = SKY_ErrInvalidDecimals;
}

/* PHP Proxy Classes */
class cipher_PubKey {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'data') return cipher_PubKey_data_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'data') return cipher_PubKey_data_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('cipher_PubKey_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_cipher_PubKey') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_cipher_PubKey();
	}
}

class cipher_SecKey {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'data') return cipher_SecKey_data_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'data') return cipher_SecKey_data_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('cipher_SecKey_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_cipher_SecKey') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_cipher_SecKey();
	}
}

class cipher_Ripemd160 {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'data') return cipher_Ripemd160_data_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'data') return cipher_Ripemd160_data_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('cipher_Ripemd160_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_cipher_Ripemd160') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_cipher_Ripemd160();
	}
}

class cipher_Sig {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'data') return cipher_Sig_data_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'data') return cipher_Sig_data_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('cipher_Sig_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_cipher_Sig') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_cipher_Sig();
	}
}

class cipher_SHA256 {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'data') return cipher_SHA256_data_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'data') return cipher_SHA256_data_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('cipher_SHA256_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_cipher_SHA256') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_cipher_SHA256();
	}
}

class cipher_Checksum {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'data') return cipher_Checksum_data_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'data') return cipher_Checksum_data_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('cipher_Checksum_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_cipher_Checksum') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_cipher_Checksum();
	}
}

class cipher_SecKeys {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'data') return cipher_SecKeys_data_set($this->_cPtr,$value);
		if ($var === 'count') return cipher_SecKeys_count_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'data') return new cipher_SecKey(cipher_SecKeys_data_get($this->_cPtr));
		if ($var === 'count') return cipher_SecKeys_count_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('cipher_SecKeys_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_cipher_SecKeys') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_cipher_SecKeys();
	}
}

class cipher_PubKeys {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'data') return cipher_PubKeys_data_set($this->_cPtr,$value);
		if ($var === 'count') return cipher_PubKeys_count_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'data') return new cipher_PubKey(cipher_PubKeys_data_get($this->_cPtr));
		if ($var === 'count') return cipher_PubKeys_count_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('cipher_PubKeys_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_cipher_PubKeys') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_cipher_PubKeys();
	}
}

class cipher_SHA256s {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'data') return cipher_SHA256s_data_set($this->_cPtr,$value);
		if ($var === 'count') return cipher_SHA256s_count_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'data') return new cipher_SHA256(cipher_SHA256s_data_get($this->_cPtr));
		if ($var === 'count') return cipher_SHA256s_count_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('cipher_SHA256s_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_cipher_SHA256s') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_cipher_SHA256s();
	}
}

class coin_UxOutArray {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'data') return coin_UxOutArray_data_set($this->_cPtr,$value);
		if ($var === 'count') return coin_UxOutArray_count_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'data') return new coin__UxOut(coin_UxOutArray_data_get($this->_cPtr));
		if ($var === 'count') return coin_UxOutArray_count_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('coin_UxOutArray_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_coin_UxOutArray') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_coin_UxOutArray();
	}
}

class cipher_Addresses {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'data') return cipher_Addresses_data_set($this->_cPtr,$value);
		if ($var === 'count') return cipher_Addresses_count_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'data') return new cipher__Address(cipher_Addresses_data_get($this->_cPtr));
		if ($var === 'count') return cipher_Addresses_count_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('cipher_Addresses_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_cipher_Addresses') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_cipher_Addresses();
	}
}

class Fee_Calculator {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'callback') return Fee_Calculator_callback_set($this->_cPtr,$value);
		if ($var === 'context') return Fee_Calculator_context_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'callback') return Fee_Calculator_callback_get($this->_cPtr);
		if ($var === 'context') return Fee_Calculator_context_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('Fee_Calculator_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Fee_Calculator') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Fee_Calculator();
	}
}

class _GoString_ {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'p') return _GoString__p_set($this->_cPtr,$value);
		if ($var === 'n') return _GoString__n_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'p') return _GoString__p_get($this->_cPtr);
		if ($var === 'n') return _GoString__n_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('_GoString__'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p__GoString_') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new__GoString_();
	}
}

class GoInterface {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 't') return GoInterface_t_set($this->_cPtr,$value);
		if ($var === 'v') return GoInterface_v_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 't') return GoInterface_t_get($this->_cPtr);
		if ($var === 'v') return GoInterface_v_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('GoInterface_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_GoInterface') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_GoInterface();
	}
}

class GoSlice {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'GoSlice_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		$func = 'GoSlice_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('GoSlice_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_GoSlice') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_GoSlice();
	}
}

class api__RichlistParams {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'N') return api__RichlistParams_N_set($this->_cPtr,$value);
		if ($var === 'IncludeDistribution') return api__RichlistParams_IncludeDistribution_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'N') return api__RichlistParams_N_get($this->_cPtr);
		if ($var === 'IncludeDistribution') return api__RichlistParams_IncludeDistribution_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('api__RichlistParams_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_api__RichlistParams') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_api__RichlistParams();
	}
}

class api__NetworkConnectionsFilter {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'States') return api__NetworkConnectionsFilter_States_set($this->_cPtr,$value);
		if ($var === 'Direction') return api__NetworkConnectionsFilter_Direction_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'States') return new GoString_(api__NetworkConnectionsFilter_States_get($this->_cPtr));
		if ($var === 'Direction') return new GoString_(api__NetworkConnectionsFilter_Direction_get($this->_cPtr));
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('api__NetworkConnectionsFilter_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_api__NetworkConnectionsFilter') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_api__NetworkConnectionsFilter();
	}
}

class cipher__Address {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'Version') return cipher__Address_Version_set($this->_cPtr,$value);
		if ($var === 'Key') return cipher__Address_Key_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'Version') return cipher__Address_Version_get($this->_cPtr);
		if ($var === 'Key') return cipher__Address_Key_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('cipher__Address_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_cipher__Address') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_cipher__Address();
	}
}

class cipher__BitcoinAddress {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'Version') return cipher__BitcoinAddress_Version_set($this->_cPtr,$value);
		if ($var === 'Key') return cipher__BitcoinAddress_Key_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'Version') return cipher__BitcoinAddress_Version_get($this->_cPtr);
		if ($var === 'Key') return cipher__BitcoinAddress_Key_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('cipher__BitcoinAddress_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_cipher__BitcoinAddress') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_cipher__BitcoinAddress();
	}
}

class encrypt__ScryptChacha20poly1305 {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'encrypt__ScryptChacha20poly1305_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		$func = 'encrypt__ScryptChacha20poly1305_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('encrypt__ScryptChacha20poly1305_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_encrypt__ScryptChacha20poly1305') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_encrypt__ScryptChacha20poly1305();
	}
}

class secp256k1go__Field {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'n') return secp256k1go__Field_n_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'n') return secp256k1go__Field_n_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('secp256k1go__Field_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_secp256k1go__Field') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_secp256k1go__Field();
	}
}

class secp256k1go__XY {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'secp256k1go__XY_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'X') return new secp256k1go__Field(secp256k1go__XY_X_get($this->_cPtr));
		if ($var === 'Y') return new secp256k1go__Field(secp256k1go__XY_Y_get($this->_cPtr));
		if ($var === 'Infinity') return secp256k1go__XY_Infinity_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('secp256k1go__XY_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_secp256k1go__XY') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_secp256k1go__XY();
	}
}

class secp256k1go__XYZ {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'secp256k1go__XYZ_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'X') return new secp256k1go__Field(secp256k1go__XYZ_X_get($this->_cPtr));
		if ($var === 'Y') return new secp256k1go__Field(secp256k1go__XYZ_Y_get($this->_cPtr));
		if ($var === 'Z') return new secp256k1go__Field(secp256k1go__XYZ_Z_get($this->_cPtr));
		if ($var === 'Infinity') return secp256k1go__XYZ_Infinity_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('secp256k1go__XYZ_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_secp256k1go__XYZ') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_secp256k1go__XYZ();
	}
}

class cli__SendAmount {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'Addr') return cli__SendAmount_Addr_set($this->_cPtr,$value);
		if ($var === 'Coins') return cli__SendAmount_Coins_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'Addr') return new GoString_(cli__SendAmount_Addr_get($this->_cPtr));
		if ($var === 'Coins') return cli__SendAmount_Coins_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('cli__SendAmount_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_cli__SendAmount') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_cli__SendAmount();
	}
}

class coin__Transaction {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'coin__Transaction_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'Out') return new GoSlice_(coin__Transaction_Out_get($this->_cPtr));
		if ($var === 'Sigs') return new GoSlice_(coin__Transaction_Sigs_get($this->_cPtr));
		if ($var === 'In') return new GoSlice_(coin__Transaction_In_get($this->_cPtr));
		$func = 'coin__Transaction_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('coin__Transaction_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_coin__Transaction') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_coin__Transaction();
	}
}

class coin__TransactionOutput {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'coin__TransactionOutput_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'Address') return new cipher__Address(coin__TransactionOutput_Address_get($this->_cPtr));
		if ($var === 'Hours') return coin__TransactionOutput_Hours_get($this->_cPtr);
		if ($var === 'Coins') return coin__TransactionOutput_Coins_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('coin__TransactionOutput_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_coin__TransactionOutput') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_coin__TransactionOutput();
	}
}

class coin__BlockHeader {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'coin__BlockHeader_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		$func = 'coin__BlockHeader_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('coin__BlockHeader_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_coin__BlockHeader') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_coin__BlockHeader();
	}
}

class coin__BlockBody {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'Transactions') return coin__BlockBody_Transactions_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'Transactions') return new GoSlice_(coin__BlockBody_Transactions_get($this->_cPtr));
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('coin__BlockBody_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_coin__BlockBody') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_coin__BlockBody();
	}
}

class coin__Block {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'Body') return coin__Block_Body_set($this->_cPtr,$value);
		if ($var === 'Head') return coin__Block_Head_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'Body') return new coin__BlockBody(coin__Block_Body_get($this->_cPtr));
		if ($var === 'Head') return new coin__BlockHeader(coin__Block_Head_get($this->_cPtr));
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('coin__Block_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_coin__Block') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_coin__Block();
	}
}

class coin__SignedBlock {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'Sig') return coin__SignedBlock_Sig_set($this->_cPtr,$value);
		if ($var === '_unnamed') return coin__SignedBlock__unnamed_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === '_unnamed') return new coin__Block(coin__SignedBlock__unnamed_get($this->_cPtr));
		if ($var === 'Sig') return coin__SignedBlock_Sig_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('coin__SignedBlock_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_coin__SignedBlock') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_coin__SignedBlock();
	}
}

class coin__UxHead {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'BkSeq') return coin__UxHead_BkSeq_set($this->_cPtr,$value);
		if ($var === 'Time') return coin__UxHead_Time_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'BkSeq') return coin__UxHead_BkSeq_get($this->_cPtr);
		if ($var === 'Time') return coin__UxHead_Time_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('coin__UxHead_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_coin__UxHead') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_coin__UxHead();
	}
}

class coin__UxBody {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'coin__UxBody_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'Address') return new cipher__Address(coin__UxBody_Address_get($this->_cPtr));
		$func = 'coin__UxBody_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('coin__UxBody_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_coin__UxBody') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_coin__UxBody();
	}
}

class coin__UxOut {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'Body') return coin__UxOut_Body_set($this->_cPtr,$value);
		if ($var === 'Head') return coin__UxOut_Head_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'Body') return new coin__UxBody(coin__UxOut_Body_get($this->_cPtr));
		if ($var === 'Head') return new coin__UxHead(coin__UxOut_Head_get($this->_cPtr));
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('coin__UxOut_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_coin__UxOut') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_coin__UxOut();
	}
}

class httphelper__Address {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === '_unnamed') return httphelper__Address__unnamed_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === '_unnamed') return new cipher__Address(httphelper__Address__unnamed_get($this->_cPtr));
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('httphelper__Address_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_httphelper__Address') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_httphelper__Address();
	}
}

class httphelper__SHA256 {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === '_unnamed') return httphelper__SHA256__unnamed_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === '_unnamed') return httphelper__SHA256__unnamed_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('httphelper__SHA256_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_httphelper__SHA256') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_httphelper__SHA256();
	}
}

class wallet__Balance {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'Hours') return wallet__Balance_Hours_set($this->_cPtr,$value);
		if ($var === 'Coins') return wallet__Balance_Coins_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'Hours') return wallet__Balance_Hours_get($this->_cPtr);
		if ($var === 'Coins') return wallet__Balance_Coins_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('wallet__Balance_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_wallet__Balance') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_wallet__Balance();
	}
}

class wallet__BalancePair {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'Confirmed') return wallet__BalancePair_Confirmed_set($this->_cPtr,$value);
		if ($var === 'Predicted') return wallet__BalancePair_Predicted_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'Confirmed') return new wallet__Balance(wallet__BalancePair_Confirmed_get($this->_cPtr));
		if ($var === 'Predicted') return new wallet__Balance(wallet__BalancePair_Predicted_get($this->_cPtr));
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('wallet__BalancePair_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_wallet__BalancePair') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_wallet__BalancePair();
	}
}

class wallet__Entry {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'wallet__Entry_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'Address') return new cipher__Address(wallet__Entry_Address_get($this->_cPtr));
		if ($var === 'Secret') return wallet__Entry_Secret_get($this->_cPtr);
		if ($var === 'c_Public') return wallet__Entry_c_Public_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('wallet__Entry_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_wallet__Entry') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_wallet__Entry();
	}
}

class wallet__Note {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'Value') return wallet__Note_Value_set($this->_cPtr,$value);
		if ($var === 'TxID') return wallet__Note_TxID_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'Value') return new GoString_(wallet__Note_Value_get($this->_cPtr));
		if ($var === 'TxID') return new GoString_(wallet__Note_TxID_get($this->_cPtr));
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('wallet__Note_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_wallet__Note') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_wallet__Note();
	}
}

class wallet__ReadableNote {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'TransactionID') return wallet__ReadableNote_TransactionID_set($this->_cPtr,$value);
		if ($var === 'ActualNote') return wallet__ReadableNote_ActualNote_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'TransactionID') return new GoString_(wallet__ReadableNote_TransactionID_get($this->_cPtr));
		if ($var === 'ActualNote') return new GoString_(wallet__ReadableNote_ActualNote_get($this->_cPtr));
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('wallet__ReadableNote_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_wallet__ReadableNote') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_wallet__ReadableNote();
	}
}

class transaction__UxBalance {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'transaction__UxBalance_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'Address') return new cipher__Address(transaction__UxBalance_Address_get($this->_cPtr));
		$func = 'transaction__UxBalance_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('transaction__UxBalance_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_transaction__UxBalance') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_transaction__UxBalance();
	}
}

class api__TransactionInput {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'CalculatedHours') return api__TransactionInput_CalculatedHours_set($this->_cPtr,$value);
		if ($var === 'UxOut') return api__TransactionInput_UxOut_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'UxOut') return new coin__UxOut(api__TransactionInput_UxOut_get($this->_cPtr));
		if ($var === 'CalculatedHours') return api__TransactionInput_CalculatedHours_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('api__TransactionInput_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_api__TransactionInput') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_api__TransactionInput();
	}
}

class GoComplex64_ {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'real') return GoComplex64__real_set($this->_cPtr,$value);
		if ($var === 'imaginary') return GoComplex64__imaginary_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'real') return GoComplex64__real_get($this->_cPtr);
		if ($var === 'imaginary') return GoComplex64__imaginary_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('GoComplex64__'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_GoComplex64_') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_GoComplex64_();
	}
}

class GoComplex128_ {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'real') return GoComplex128__real_set($this->_cPtr,$value);
		if ($var === 'imaginary') return GoComplex128__imaginary_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'real') return GoComplex128__real_get($this->_cPtr);
		if ($var === 'imaginary') return GoComplex128__imaginary_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('GoComplex128__'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_GoComplex128_') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_GoComplex128_();
	}
}

class GoString_ {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'p') return GoString__p_set($this->_cPtr,$value);
		if ($var === 'n') return GoString__n_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'p') return GoString__p_get($this->_cPtr);
		if ($var === 'n') return GoString__n_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('GoString__'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_GoString_') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_GoString_();
	}
}

class GoInterface_ {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 't') return GoInterface__t_set($this->_cPtr,$value);
		if ($var === 'v') return GoInterface__v_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 't') return GoInterface__t_get($this->_cPtr);
		if ($var === 'v') return GoInterface__v_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('GoInterface__'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_GoInterface_') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_GoInterface_();
	}
}

class GoSlice_ {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'GoSlice__'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		$func = 'GoSlice__'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('GoSlice__'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_GoSlice_') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_GoSlice_();
	}
}

class Number {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'nat') return Number_nat_set($this->_cPtr,$value);
		if ($var === 'neg') return Number_neg_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'nat') return new GoSlice_(Number_nat_get($this->_cPtr));
		if ($var === 'neg') return Number_neg_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('Number_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Number') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Number();
	}
}

class Signature {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'R') return Signature_R_set($this->_cPtr,$value);
		if ($var === 'S') return Signature_S_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'R') return new Number(Signature_R_get($this->_cPtr));
		if ($var === 'S') return new Number(Signature_S_get($this->_cPtr));
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('Signature_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Signature') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Signature();
	}
}

class Wallet {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'Meta') return Wallet_Meta_set($this->_cPtr,$value);
		if ($var === 'Entries') return Wallet_Entries_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'Entries') return new GoSlice_(Wallet_Entries_get($this->_cPtr));
		if ($var === 'Meta') return Wallet_Meta_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('Wallet_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Wallet') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Wallet();
	}
}

class FeeCalculator {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'callback') return FeeCalculator_callback_set($this->_cPtr,$value);
		if ($var === 'context') return FeeCalculator_context_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_skycoin_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'callback') return FeeCalculator_callback_get($this->_cPtr);
		if ($var === 'context') return FeeCalculator_context_get($this->_cPtr);
		if ($var === 'thisown') return swig_skycoin_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('FeeCalculator_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_FeeCalculator') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_FeeCalculator();
	}
}


?>
